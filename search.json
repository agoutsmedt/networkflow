[{"path":"https://agoutsmedt.github.io/networkflow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 networkflow authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/articles/exploring_dynamic_networks.html","id":"building-your-list-of-networks","dir":"Articles","previous_headings":"","what":"Building your list of networks","title":"Exploring dynamic networks","text":"","code":"library(networkflow) library(magrittr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidygraph) #>  #> Attaching package: 'tidygraph' #> The following object is masked from 'package:stats': #>  #>     filter nodes <- Nodes_stagflation %>%     dplyr::rename(ID_Art = ItemID_Ref) %>%    dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation %>%     dplyr::rename(ID_Art = Citing_ItemID_Ref) single_network <- dynamic_network_cooccurrence(nodes = nodes,                                                directed_edges = references,                                                source_column = \"ID_Art\",                                                target_column = \"ItemID_Ref\",                                                time_variable = NULL,                                                cooccurrence_method = \"coupling_similarity\",                                                time_window = NULL,                                                edges_threshold = 1,                                                compute_size = FALSE,                                                keep_singleton = FALSE,                                                overlapping_window = TRUE) #> Warning: `dynamic_network_cooccurrence()` was deprecated in networkflow 0.1.0. #> ℹ Please use `build_dynamic_networks()` instead. #> We remove the nodes that are alone with no edge. network_list <- dynamic_network_cooccurrence(nodes = nodes,                                              directed_edges = references,                                              source_column = \"ID_Art\",                                              target_column = \"ItemID_Ref\",                                              time_variable = \"Year\",                                              cooccurrence_method = \"coupling_similarity\",                                              time_window = 15,                                              edges_threshold = 1,                                              compute_size = FALSE,                                              keep_singleton = FALSE,                                              overlapping_window = TRUE) #> Creation of the network for the 1975-1989 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1976-1990 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1977-1991 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1978-1992 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1979-1993 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1980-1994 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1981-1995 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1982-1996 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1983-1997 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1984-1998 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1985-1999 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1986-2000 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1987-2001 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1988-2002 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1989-2003 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1990-2004 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1991-2005 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1992-2006 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1993-2007 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1994-2008 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1995-2009 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1996-2010 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1997-2011 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1998-2012 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1999-2013 window. #> We remove the nodes that are alone with no edge.  network_list[[1]] #> # A tbl_graph: 71 nodes and 435 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 71 × 8 (active) #>   ID_Art     Author            Year Author_… Title     Journal     Type  time_w… #>   <chr>      <chr>            <int> <chr>    <chr>     <chr>       <chr> <chr>   #> 1 16182155   GORDON-R          1975 GORDON-… ALTERNAT… \"BROOKINGS… Stag… 1975-1… #> 2 26283591   GORDON-R          1975 GORDON-… THE IMPA… \"BROOKINGS… Stag… 1975-1… #> 3 16182201   OKUN-A            1975 OKUN-A-… INFLATIO… \"BROOKINGS… Stag… 1975-1… #> 4 47749045   BRONFENBRENNER-M  1976 BRONFEN… ELEMENTS… \"ZEITSCHRI… Stag… 1975-1… #> 5 1111111141 KARNOSKY-D        1976 KARNOSK… THE LINK… \"REVIEW\"    Stag… 1975-1… #> 6 1021902    FRIEDMAN-M        1977 FRIEDMA… NOBEL LE… \"THE JOURN… Stag… 1975-1… #> # … with 65 more rows #> # #> # Edge Data: 435 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     6    11 0.00158  1021902 1111111122 #> 2     6    45 0.000173 1021902 1111111128 #> 3     6    66 0.000430 1021902 1111111134 #> # … with 432 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/articles/exploring_dynamic_networks.html","id":"clustering-and-intertemporal-naming","dir":"Articles","previous_headings":"","what":"Clustering and intertemporal naming","title":"Exploring dynamic networks","text":"","code":"network_list <- lapply(network_list,                         function(tbl) tbl %N>% mutate(clusters = group_louvain())) network_list <- intertemporal_cluster_naming(list_graph = network_list,                                              cluster_column = \"clusters\",                                              node_key = \"ID_Art\",                                              threshold_similarity = 0.5001,                                              similarity_type = \"partial\") #> Warning: `intertemporal_cluster_naming()` was deprecated in networkflow 0.1.0. #> ℹ Please use `merge_dynamic_clusters()` instead. #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)`  network_list[[1]] #> # A tbl_graph: 71 nodes and 435 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 71 × 10 (active) #>   ID_Art     Author   Year Author… Title  Journal  Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>   <chr>  <chr>    <chr> <chr>   <chr>   <chr>   #> 1 16182155   GORDON…  1975 GORDON… ALTER… \"BROOKI… Stag… 1975-1… 3       cl_3    #> 2 26283591   GORDON…  1975 GORDON… THE I… \"BROOKI… Stag… 1975-1… 3       cl_3    #> 3 16182201   OKUN-A   1975 OKUN-A… INFLA… \"BROOKI… Stag… 1975-1… 1       cl_1    #> 4 47749045   BRONFE…  1976 BRONFE… ELEME… \"ZEITSC… Stag… 1975-1… 1       cl_1    #> 5 1111111141 KARNOS…  1976 KARNOS… THE L… \"REVIEW\" Stag… 1975-1… 4       cl_4    #> 6 1021902    FRIEDM…  1977 FRIEDM… NOBEL… \"THE JO… Stag… 1975-1… 1       cl_1    #> # … with 65 more rows #> # #> # Edge Data: 435 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     6    11 0.00158  1021902 1111111122 #> 2     6    45 0.000173 1021902 1111111128 #> 3     6    66 0.000430 1021902 1111111134 #> # … with 432 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/articles/exploring_dynamic_networks.html","id":"building-alluvial","dir":"Articles","previous_headings":"","what":"Building Alluvial","title":"Exploring dynamic networks","text":"","code":"library(ggplot2) library(ggalluvial)  alluv_dt <- networks_to_alluv(list_graph = network_list,                             intertemporal_cluster_column = \"intertemporal_name\",                             node_key = \"ID_Art\",                             summary_cl_stats = FALSE)  alluv_dt <- minimize_crossing_alluvial(alluv_dt = alluv_dt,                                      node_key = \"ID_Art\") alluv_dt[,y_alluv:=1/.N, Window]  ggplot(alluv_dt, aes(x = Window, y= y_alluv, stratum = intertemporal_name, alluvium = ID_Art, fill = intertemporal_name, label = intertemporal_name)) +   geom_stratum(alpha =1, size=1/12) +   geom_flow() +   theme(legend.position = \"none\") +   theme_minimal() +   theme(plot.background = element_rect(fill = 'white', colour = NA)) +   ggtitle(\"\")"},{"path":"https://agoutsmedt.github.io/networkflow/articles/exploring_dynamic_networks.html","id":"exploring-tf-idf","dir":"Articles","previous_headings":"","what":"exploring tf-idf","title":"Exploring dynamic networks","text":"","code":"corpus <- merge(alluv_dt,                 nodes,                 by = \"ID_Art\",                 all.x = TRUE)  tf_idf <- extract_tfidf(data = corpus,                         text_columns = \"Title\",                         grouping_columns = \"intertemporal_name\",                         n_gram = 3L,                         stopwords = NULL,                         stopwords_type = \"smart\",                         clean_word_method = \"lemmatize\",                         ngrams_filter = 2)  tf_idf %>%    group_by(document) %>%    slice_max(order_by = tf_idf, n = 1, with_ties = FALSE) %>%    ungroup() %>%    arrange(intertemporal_name) %>%    select(-document)"},{"path":"https://agoutsmedt.github.io/networkflow/articles/workflow-network.html","id":"first-step-creating-the-network-and-keeping-the-main-component","dir":"Articles","previous_headings":"","what":"First step: creating the network and keeping the main component","title":"A Workflow for network analysis","text":"point departure, need bibliometric data prepared certain format:1 need nodes table. instance, may list articles metadata (author(s), title, journal, etc.). Nodes must unique identifier information node gathered one row (case articles, need one row per article). need directed_edges table, table links nodes another variable used build edges nodes. instance, table links articles (nodes) references cited articles. can also journal list authors (interested collaboration). directed_edges table, need identifier nodes (also present nodes table), unique identifier categories (references cited, journals, authors…) nodes linked . soon nodes edges file (see biblionetwork package creating files), can create graph, using tidygraph tbl_graph() function. next step, recurrent many network analyses, notably bibliometric netwoks like bibliographic coupling networks keep main component network. done one step using tbl_main_component() function networkflow. parameter nb_components allows choose number components want keep. obvious reasons, settled 1 default. However, happen networks (instance co-authorship networks) second biggest component network quite large. avoid removing big components without knowing , tbl_main_component() function integrates warning happens secondary component gathering x% total number nodes removed. threshold_alert parameter set 0.05 default, can reduce really want avoid removing relatively big components.","code":"library(networkflow)  ## basic example code  graph <- tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, directed = FALSE, node_key = \"ItemID_Ref\", nb_components = 1) #> Warning: `tbl_main_component()` was deprecated in networkflow 0.1.0. #> ℹ Please use `filter_components()` instead. print(graph) #> # A tbl_graph: 145 nodes and 2593 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 145 × 6 (active) #>   Id       Author      Year Author_date     Title                 Journal        #>   <chr>    <chr>      <int> <chr>           <chr>                 <chr>          #> 1 96284971 ALBANESI-S  2003 ALBANESI-S-2003 Expectation traps an… \"The Review o… #> 2 37095547 ATESOGLU-H  1980 ATESOGLU-H-1980 Inflation and its ac… \"Journal of P… #> 3 46282251 ATESOGLU-H  1982 ATESOGLU-H-1982 WAGES AND STAGFLATION \"JOURNAL OF P… #> 4 214927   BALL-L      1991 BALL-L-1991     The Genesis of Infla… \"Journal of M… #> 5 2207578  BALL-L      1995 BALL-L-1995a    Relative-Price Chang… \"The Quarterl… #> 6 10729971 BALL-L      1995 BALL-L-1995b    Time-consistent poli… \"Journal of M… #> # … with 139 more rows #> # #> # Edge Data: 2,593 × 5 #>    from    to weight Source  Target #>   <int> <int>  <dbl>  <int>   <int> #> 1     4     5 0.146  214927 2207578 #> 2     4    65 0.0408 214927 5982867 #> 3     4    46 0.0973 214927 8456979 #> # … with 2,590 more rows ## basic example code  graph <- tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, directed = FALSE, node_key = \"ItemID_Ref\", threshold_alert = 0.001) #> Warning in tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, : #> Warning: you have removed a component gathering more than 0.001% of the nodes print(graph) #> # A tbl_graph: 145 nodes and 2593 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 145 × 6 (active) #>   Id       Author      Year Author_date     Title                 Journal        #>   <chr>    <chr>      <int> <chr>           <chr>                 <chr>          #> 1 96284971 ALBANESI-S  2003 ALBANESI-S-2003 Expectation traps an… \"The Review o… #> 2 37095547 ATESOGLU-H  1980 ATESOGLU-H-1980 Inflation and its ac… \"Journal of P… #> 3 46282251 ATESOGLU-H  1982 ATESOGLU-H-1982 WAGES AND STAGFLATION \"JOURNAL OF P… #> 4 214927   BALL-L      1991 BALL-L-1991     The Genesis of Infla… \"Journal of M… #> 5 2207578  BALL-L      1995 BALL-L-1995a    Relative-Price Chang… \"The Quarterl… #> 6 10729971 BALL-L      1995 BALL-L-1995b    Time-consistent poli… \"Journal of M… #> # … with 139 more rows #> # #> # Edge Data: 2,593 × 5 #>    from    to weight Source  Target #>   <int> <int>  <dbl>  <int>   <int> #> 1     4     5 0.146  214927 2207578 #> 2     4    65 0.0408 214927 5982867 #> 3     4    46 0.0973 214927 8456979 #> # … with 2,590 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/articles/workflow-network.html","id":"second-step-finding-communities","dir":"Articles","previous_headings":"","what":"Second step: finding communities","title":"A Workflow for network analysis","text":"tidygraph graph, important step run community detection algorithms group nodes depending links. package uses leidenAlg package, find_partition() function, implement Leiden algorithm (Traag, Waltman, van Eck 2019). leiden_workflow() function package runs Leiden algorithm attributes community number node Com_ID column, also edge (depending nodes within community). can observe function also gives size community, calculating share total nodes community. function also allows play resolution parameter leidenAlg find_partition() function. Varying resolution algorithm results different partition different number communities. lower resolution means less communities, conversely. basic resolution leiden_workflow() set res_1 equals 1 default. can vary parameter, also try second resolution res_2 third one res_3: detected different communities network, well way projection graph, two important steps implemented . First, attribute colors community. colors used nodes edges project graph ggraph. function community_colors networkflow package allow . just give palette (many colors number communities better visualisation).2 want next give name automatically community. community_names() function allows : gives community label node, within community, highest score statistics choose. next exemple, calculate degree node, community take name label highest degree node.","code":"# creating again the graph graph <- tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, directed = FALSE, node_key = \"ItemID_Ref\", nb_components = 1)  # finding communities graph <- leiden_workflow(graph) print(graph) # creating again the graph graph <- tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, directed = FALSE, node_key = \"ItemID_Ref\", nb_components = 1)  # finding communities graph <- leiden_workflow(graph, res_1 = 0.5, res_2 = 2, res_3 = 3) print(graph) # loading a palette with many colors palette <- c(\"#1969B3\",\"#01A5D8\",\"#DA3E61\",\"#3CB95F\",\"#E0AF0C\",\"#E25920\",\"#6C7FC9\",\"#DE9493\",\"#CD242E\",\"#6F4288\",\"#B2EEF8\",\"#7FF6FD\",\"#FDB8D6\",\"#8BF9A9\",\"#FEF34A\",\"#FEC57D\",\"#DAEFFB\",\"#FEE3E1\",\"#FBB2A7\",\"#EFD7F2\",\"#5CAADA\",\"#37D4F5\",\"#F5779B\",\"#62E186\",\"#FBDA28\",\"#FB8F4A\",\"#A4B9EA\",\"#FAC2C0\",\"#EB6466\",\"#AD87BC\",\"#0B3074\",\"#00517C\",\"#871B2A\",\"#1A6029\",\"#7C4B05\",\"#8A260E\",\"#2E3679\",\"#793F3F\",\"#840F14\",\"#401C56\",\"#003C65\",\"#741A09\",\"#602A2A\",\"#34134A\",\"#114A1B\",\"#27DDD1\",\"#27DD8D\",\"#4ADD27\",\"#D3DD27\",\"#DDA427\",\"#DF2935\",\"#DD27BC\",\"#BA27DD\",\"#3227DD\",\"#2761DD\",\"#27DDD1\")  # creating again the graph graph <- tbl_main_component(nodes = Nodes_coupling, edges = Edges_coupling, directed = FALSE, node_key = \"ItemID_Ref\", nb_components = 1)  # finding communities graph <- leiden_workflow(graph)  # attributing colors graph <- community_colors(graph, palette, community_column = \"Com_ID\") print(graph) library(magrittr) library(dplyr) library(tidygraph)  # calculating the degree of nodes  graph <- graph %>%    activate(nodes) %>%    mutate(degree = centrality_degree())   # giving names to communities  graph <- community_names(graph, ordering_column = \"degree\", naming = \"Author_date\", community_column = \"Com_ID\")  print(graph)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://agoutsmedt.github.io/networkflow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aurélien Goutsmedt. Maintainer, author. Alexandre Truc. Author.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goutsmedt , Truc (2023). networkflow: Functions Workflow Manipulate Networks. https://github.com/agoutsmedt/networkflow, https://agoutsmedt.github.io/networkflow/.","code":"@Manual{,   title = {networkflow: Functions For A Workflow To Manipulate Networks},   author = {Aurélien Goutsmedt and Alexandre Truc},   year = {2023},   note = {https://github.com/agoutsmedt/networkflow, https://agoutsmedt.github.io/networkflow/}, }"},{"path":"https://agoutsmedt.github.io/networkflow/index.html","id":"networkflow","dir":"","previous_headings":"","what":"Functions For A Workflow To Manipulate Networks","title":"Functions For A Workflow To Manipulate Networks","text":"goal networkflow (workflow networks) propose series functions make easier quicker manipulats networks. mainly targets working bibliometric networks (see biblionetwork package creating networks). package heavily relies igraph tidygraph, aims producing ready-made networks projecting using ggraph. package aims helping users follow quickly easily main steps network manipulation, creating graph, detecting clusters, projecting . Please see vignette(\"workflow-network\") details workflow dealing unique network. Networkflow also proposes worfklow deal list networks, order develop dynamic analysis. implements method merge clusters across successive networks, identify inter-temporal clusters. also develops corresponding visualisations display evolution clusters across networks. vignette(\"exploring_dynamic_networks\") gives example workflow dynamic networks. can also find illustrations method “Independent European Macroeconomics? History European Macroeconomics Lens European Economic Review. can cite package :","code":"citation(\"networkflow\") #>  #> Pour citer le package 'networkflow' dans une publication, utilisez : #>  #>   Goutsmedt A, Truc A (2022). _networkflow: Functions For A Workflow To #>   Manipulate Networks_. https://github.com/agoutsmedt/networkflow, #>   https://agoutsmedt.github.io/networkflow/. #>  #> Une entrée BibTeX pour les utilisateurs LaTeX est #>  #>   @Manual{, #>     title = {networkflow: Functions For A Workflow To Manipulate Networks}, #>     author = {Aurélien Goutsmedt and Alexandre Truc}, #>     year = {2022}, #>     note = {https://github.com/agoutsmedt/networkflow, #> https://agoutsmedt.github.io/networkflow/}, #>   }"},{"path":"https://agoutsmedt.github.io/networkflow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions For A Workflow To Manipulate Networks","text":"can install development version GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"agoutsmedt/networkflow\")"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Authors_stagflation.html","id":null,"dir":"Reference","previous_headings":"","what":"List Of Authors Of The Articles and Books Explaining the 1970s US Stagflation. — Authors_stagflation","title":"List Of Authors Of The Articles and Books Explaining the 1970s US Stagflation. — Authors_stagflation","text":"dataset associating books academic articles endeavouring explain US stagflation authors (Nodes_stagflation just takes first author; complete list authors per document).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Authors_stagflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Of Authors Of The Articles and Books Explaining the 1970s US Stagflation. — Authors_stagflation","text":"","code":"Authors_stagflation"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Authors_stagflation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List Of Authors Of The Articles and Books Explaining the 1970s US Stagflation. — Authors_stagflation","text":"data frame 558 rows 7 variables: ItemID_Ref Identifier document published author Author Author document Order Use label nodes","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Authors_stagflation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List Of Authors Of The Articles and Books Explaining the 1970s US Stagflation. — Authors_stagflation","text":"Goutsmedt . (2020) “Stagflation Great Inflation: Explaining 1970s US Economic Situation”. Revue d’Economie Politique, Forthcoming 2021.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Edges_coupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Edges For Bibliographic Coupling Network Of Articles and Books Explaining the 1970s US Stagflation. — Edges_coupling","title":"Edges For Bibliographic Coupling Network Of Articles and Books Explaining the 1970s US Stagflation. — Edges_coupling","text":"dataset containing edges bibliographic coupling network articles books stagflation. Built using Ref_stagflation: biblionetwork::biblio_coupling(Ref_stagflation,\"Citing_ItemID_Ref\",\"ItemID_Ref\"). used Nodes_coupling create network tidygraph.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Edges_coupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edges For Bibliographic Coupling Network Of Articles and Books Explaining the 1970s US Stagflation. — Edges_coupling","text":"","code":"Edges_coupling"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Edges_coupling.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Edges For Bibliographic Coupling Network Of Articles and Books Explaining the 1970s US Stagflation. — Edges_coupling","text":"data frame 154 rows 6 variables: Identifier Source document stagflation, character format Identifier Target document stagflation, character format weight weight calculated according \"coupling_angle\" method (see biblio_coupling()) Source copy identifiers Source document stagflation Target copy identifiers Target document stagflation","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Edges_coupling.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Edges For Bibliographic Coupling Network Of Articles and Books Explaining the 1970s US Stagflation. — Edges_coupling","text":"Created Nodes_stagflation.rda","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_coupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_coupling","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_coupling","text":"dataset containing books academic articles endeavouring explain happened US economy 1970s least two references bibliography. file used nodes, edges_coupling.rda, bibliographic coupling network.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_coupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_coupling","text":"","code":"Nodes_coupling"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_coupling.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_coupling","text":"data frame 154 rows 6 variables: ItemID_Ref Identifier document stagflation, character format Author Author document stagflation Author_date Use label nodes Year Year publication document Title Title document Journal Journal publication document (article)","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_coupling.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_coupling","text":"Created Nodes_stagflation.rda","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_stagflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_stagflation","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_stagflation","text":"dataset containing books academic articles endeavouring explain happened US economy 1970s, well articles books cited least twice first set articles books (stagflation).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_stagflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_stagflation","text":"","code":"Nodes_stagflation"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_stagflation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_stagflation","text":"data frame 558 rows 7 variables: ItemID_Ref Identifier document Author Author document Author_date Use label nodes Year Year publication document Title Title document Journal Journal publication document (article) Type \"Stagflation\", document listed explanation US stagflation. \"Non-Stagflation\", document cited document explaining stagflation","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Nodes_stagflation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Articles and Books Explaining the 1970s US Stagflation. — Nodes_stagflation","text":"Goutsmedt . (2020) “Stagflation Great Inflation: Explaining 1970s US Economic Situation”. Revue d’Economie Politique, Forthcoming 2021.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Ref_stagflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Articles and Books Explaining the 1970s US Stagflation. — Ref_stagflation","title":"Articles and Books Explaining the 1970s US Stagflation. — Ref_stagflation","text":"dataset containing articles books cited books academic articles endeavouring explain happened US economy 1970s.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Ref_stagflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Articles and Books Explaining the 1970s US Stagflation. — Ref_stagflation","text":"","code":"Ref_stagflation"},{"path":"https://agoutsmedt.github.io/networkflow/reference/Ref_stagflation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Articles and Books Explaining the 1970s US Stagflation. — Ref_stagflation","text":"data frame 4416 rows 6 variables: Citing_ItemID_Ref Identifier citing document ItemID_Ref Identifier cited document Author Author cited document Year Year publication cited document Title Title cited document Journal Journal publication cited document (article)","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/Ref_stagflation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Articles and Books Explaining the 1970s US Stagflation. — Ref_stagflation","text":"Goutsmedt . (2020) “Stagflation Great Inflation: Explaining 1970s US Economic Situation”. Revue d’Economie Politique, Forthcoming 2021.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and Add Clusters to Graphs — add_clusters","title":"Detect and Add Clusters to Graphs — add_clusters","text":"function takes input tibble graph (tidygraph) list tibble graphs, runs different cluster detection algorithms depending method chosen user (see @details information different methods. function associate node corresponding cluster identifier. also creates cluster attribute edges: edge associated corresponding cluster identifier  two nodes connected edge belong cluster nodes different cluster, edge takes \"00\" cluster attribute.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and Add Clusters to Graphs — add_clusters","text":"","code":"add_clusters(   graphs,   weights = NULL,   clustering_method = c(\"leiden\", \"louvain\", \"fast_greedy\", \"infomap\", \"walktrap\"),   objective_function = c(\"modularity\", \"CPM\"),   resolution = 1,   n_iterations = 1000,   n_groups = NULL,   node_weights = NULL,   trials = 10,   steps = 4,   verbose = TRUE,   seed = NA )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and Add Clusters to Graphs — add_clusters","text":"graphs tibble graph tidygraph, list tibble graphs data frame. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. Edge weights used calculate weighted edge betweenness. means edges interpreted distances, connection strengths. clustering_method different clustering algorithms implemented function (see details). parameters function depend clustering method chosen. objective_function objective function maximize leiden algorithm. Whether use Constant Potts Model (CPM) modularity. Must either \"CPM\" \"modularity\" (see igraph::cluster_leiden()). CPM used default. resolution resolution parameter use leiden algorithm (see igraph::cluster_leiden()). Higher resolutions lead smaller communities, lower resolutions lead fewer larger communities. n_iterations number iterations iterate Leiden algorithm. iteration may improve partition (see igraph::cluster_leiden()). n_groups May used fast greedy walktrap algorithm. Integer scalar, desired number communities. low two high, error message given. node_weights May used Leiden infomap algorithms. Leiden, provided, automatically determined basis objective_function (see igraph::cluster_leiden()). infomap, present, vertices considered weight. larger vertex weight means larger probability random surfer jumps vertex (see igraph::cluster_infomap()). trials number attempts partition network (can integer value equal larger 1) infomap algorithm (see igraph::cluster_infomap()). steps length random walks perform walktrap algorithm (see igraph::cluster_walktrap()) verbose Set FALSE want function display different sort information. seed Enter random number set seed within function. algorithms use heuristics random processes might result different cluster time function run. Setting seed particularly useful reproducibility want make sure find clusters time function run graphs.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and Add Clusters to Graphs — add_clusters","text":"tidygraph graph tidygraph list input, new cluster column nodes column size clusters, three cluster columns edges (see details).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect and Add Clusters to Graphs — add_clusters","text":"function run indifferently one tidigraph object list tidygraph object, created build_dynamic_networks(). function implements five different algorithms. Four exists igraph used package implement tidygraph (see group_graph()). function also implements Leiden algorithm (Traag et al. 2019)  igraph tidygraph yet (see cluster_leiden()). newly created columns cluster identifier nodes edges named depending method used. use Leiden algorithm, function create column called cluster_leiden nodes, three columns edges, called cluster_leiden_from, cluster_leiden_to cluster_leiden. function also automatically calculates percentage total nodes gathered cluster, column size_com. make plotting easier later, zero put one-digit cluster identifier (cluster 5 becomes \"05\"; cluster 10 becomes \"10\"). Attributing cluster identifier edges allow giving edges color nodes connecting together two nodes color, different color nodes, nodes belong different clusters.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect and Add Clusters to Graphs — add_clusters","text":"Traag VA, Waltman L, family=Eck gJpu (2019). “Louvain Leiden: Guaranteeing Well-Connected Communities.” Scientific reports, 9(1), 1--12.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/add_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect and Add Clusters to Graphs — add_clusters","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE) #> ℹ The method use for co-occurence is the coupling_similarity method. #> ℹ The edge threshold is: 1. #> ℹ We remove the nodes that are alone with no edge.  #>  #> ── Creation of the network for the 1975-1994 window. ─────────────────────────── #>  #> ── Creation of the network for the 1976-1995 window. ─────────────────────────── #>  #> ── Creation of the network for the 1977-1996 window. ─────────────────────────── #>  #> ── Creation of the network for the 1978-1997 window. ─────────────────────────── #>  #> ── Creation of the network for the 1979-1998 window. ─────────────────────────── #>  #> ── Creation of the network for the 1980-1999 window. ─────────────────────────── #>  #> ── Creation of the network for the 1981-2000 window. ─────────────────────────── #>  #> ── Creation of the network for the 1982-2001 window. ─────────────────────────── #>  #> ── Creation of the network for the 1983-2002 window. ─────────────────────────── #>  #> ── Creation of the network for the 1984-2003 window. ─────────────────────────── #>  #> ── Creation of the network for the 1985-2004 window. ─────────────────────────── #>  #> ── Creation of the network for the 1986-2005 window. ─────────────────────────── #>  #> ── Creation of the network for the 1987-2006 window. ─────────────────────────── #>  #> ── Creation of the network for the 1988-2007 window. ─────────────────────────── #>  #> ── Creation of the network for the 1989-2008 window. ─────────────────────────── #>  #> ── Creation of the network for the 1990-2009 window. ─────────────────────────── #>  #> ── Creation of the network for the 1991-2010 window. ─────────────────────────── #>  #> ── Creation of the network for the 1992-2011 window. ─────────────────────────── #>  #> ── Creation of the network for the 1993-2012 window. ─────────────────────────── #>  #> ── Creation of the network for the 1994-2013 window. ───────────────────────────  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\") #>  #> ── Cluster detection for the \"1975-1994\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"25.7%\" of the network. #>  #> ── Cluster detection for the \"1976-1995\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"26.8%\" of the network. #>  #> ── Cluster detection for the \"1977-1996\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"33.8%\" of the network. #>  #> ── Cluster detection for the \"1978-1997\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"40.6%\" of the network. #>  #> ── Cluster detection for the \"1979-1998\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"32.8%\" of the network. #>  #> ── Cluster detection for the \"1980-1999\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"29.1%\" of the network. #>  #> ── Cluster detection for the \"1981-2000\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"39.1%\" of the network. #>  #> ── Cluster detection for the \"1982-2001\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"40.5%\" of the network. #>  #> ── Cluster detection for the \"1983-2002\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"33.3%\" of the network. #>  #> ── Cluster detection for the \"1984-2003\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"31%\" of the network. #>  #> ── Cluster detection for the \"1985-2004\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"26.7%\" of the network. #>  #> ── Cluster detection for the \"1986-2005\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"37.3%\" of the network. #>  #> ── Cluster detection for the \"1987-2006\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"35.2%\" of the network. #>  #> ── Cluster detection for the \"1988-2007\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"33.3%\" of the network. #>  #> ── Cluster detection for the \"1989-2008\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"34.5%\" of the network. #>  #> ── Cluster detection for the \"1990-2009\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"33.3%\" of the network. #>  #> ── Cluster detection for the \"1991-2010\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"33.8%\" of the network. #>  #> ── Cluster detection for the \"1992-2011\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"35.4%\" of the network. #>  #> ── Cluster detection for the \"1993-2012\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"36.4%\" of the network. #>  #> ── Cluster detection for the \"1994-2013\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"41.1%\" of the network.  temporal_networks[[1]] #> # A tbl_graph: 74 nodes and 446 edges #> # #> # An undirected simple graph with 1 component #> # #> # Edge Data: 446 × 8 (active) #>    from    to   weight Source  Target     cluster_leiden_from cluster_… cluster… #>   <int> <int>    <dbl> <chr>   <chr>      <chr>               <chr>     <chr>    #> 1     6    11 0.00158  1021902 1111111122 02                  02        02       #> 2     6    45 0.000173 1021902 1111111128 02                  03        00       #> 3     6    66 0.000430 1021902 1111111134 02                  03        00       #> 4     6    35 0.000644 1021902 1111111146 02                  02        02       #> 5     6    20 0.000126 1021902 1111111180 02                  04        00       #> 6     6    42 0.000614 1021902 1111111182 02                  02        02       #> # … with 440 more rows #> # #> # Node Data: 74 × 10 #>   ID_Art   Author    Year Author_… Title   Journal Type  time_w… cluste… size_c… #>   <chr>    <chr>    <int> <chr>    <chr>   <chr>   <chr> <chr>   <chr>     <dbl> #> 1 16182155 GORDON-R  1975 GORDON-… ALTERN… BROOKI… Stag… 1975-1… 01        0.176 #> 2 26283591 GORDON-R  1975 GORDON-… THE IM… BROOKI… Stag… 1975-1… 01        0.176 #> 3 16182201 OKUN-A    1975 OKUN-A-… INFLAT… BROOKI… Stag… 1975-1… 02        0.243 #> # … with 71 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"build_network() creates network table nodes directed edges. special case general build_dynamic_networks(). function creates one several tibble graphs (built tidygraph) table nodes directed edges. instance, bibliometric networks, can give list articles list references articles cite. can use build single network multiple networks different time windows.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"","code":"build_dynamic_networks(   nodes,   directed_edges,   source_id,   target_id,   time_variable = NULL,   time_window = NULL,   cooccurrence_method = c(\"coupling_angle\", \"coupling_strength\", \"coupling_similarity\"),   overlapping_window = FALSE,   edges_threshold = 1,   compute_size = FALSE,   keep_singleton = FALSE,   filter_components = FALSE,   ...,   verbose = TRUE )  build_network(   nodes,   directed_edges,   source_id,   target_id,   cooccurrence_method = c(\"coupling_angle\", \"coupling_strength\", \"coupling_similarity\"),   edges_threshold = 1,   compute_size = FALSE,   keep_singleton = FALSE,   filter_components = FALSE,   ... )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"nodes table nodes metadata. instance, nodes articles, table likely contain year publication, name authors, title article, etc... table must one row per node. directed_edges table elements nodes connected. nodes articles, directed_edges table can contain list references cited articles, authors written articles, affiliations authors articles. source_id quoted name column unique identifier node. instance, bibliographic coupling network, id citing documents. corresponds source argument biblionetwork functions. target_id quoted name column unique identifier element connected node (instance, identifier reference cited node node article). corresponds ref argument biblionetwork functions. time_variable column temporal variable want use build windows succession networks. default, time_variable NULL function build one network without taking account temporal variable. time_window length network relatively unity time_variable column. use variable years time_variable set time_window 5, function build network five year windows. default, time_window NULL function build one network. cooccurrence_method Choose cooccurrence method build indirect edges table. function propose three methods depends biblionetwork package three methods implemented : coupling angle measure (see biblionetwork::biblio_coupling() documentation); coupling strength measure (biblionetwork::coupling_strength()); coupling similarity measure (biblionetwork:: coupling_similarity()). overlapping_window Set FALSE default. set TRUE, time_variable time_window NULL, function create succession networks moving time windows. windows moving one unit per one unit time_variable. instance, years, time_window set 5, creates networks successive time windows like 1970-1974, 1971-1975, 1972-1976, etc. edges_threshold Threshold value building edges. higher threshold, stronger links kept. See biblionetwork package documentation cooccurrence_method parameter. compute_size Set FALSE default. TRUE, function uses directed_edges data calculate many directed edges node receives (target). directed_edges table direct citations, functions calculates number time node cited nodes. need target_id nodes table make link targetted nodes directed_edges table. keep_singleton Set FALSE default. TRUE, function removes nodes undirected edges, .e. cooccurrence nodes. graphical terms, nodes alone network, link nodes. filter_components Set  TRUE want run networkflow::filter_components() filter components network(s) keep biggest component(s). change defaults parameters networkflow::filter_components(), keep main component. ... Additional arguments networkflow::filter_components(). verbose Set FALSE want function display different sort information.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"time_window NULL, function computes one network return tidygraph object built tbl_graph(). time_variable time_window NULL, function returns list tidygraph networks, time window.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"build_network() added convenience just special case general build_dynamic_networks(), ","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/build_dynamic_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating One or Multiple Networks from a List of Nodes and Directed Edges — build_dynamic_networks","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE) #> ℹ The method use for co-occurence is the coupling_similarity method. #> ℹ The edge threshold is: 1. #> ℹ We remove the nodes that are alone with no edge.  #>  #> ── Creation of the network for the 1975-1994 window. ─────────────────────────── #>  #> ── Creation of the network for the 1976-1995 window. ─────────────────────────── #>  #> ── Creation of the network for the 1977-1996 window. ─────────────────────────── #>  #> ── Creation of the network for the 1978-1997 window. ─────────────────────────── #>  #> ── Creation of the network for the 1979-1998 window. ─────────────────────────── #>  #> ── Creation of the network for the 1980-1999 window. ─────────────────────────── #>  #> ── Creation of the network for the 1981-2000 window. ─────────────────────────── #>  #> ── Creation of the network for the 1982-2001 window. ─────────────────────────── #>  #> ── Creation of the network for the 1983-2002 window. ─────────────────────────── #>  #> ── Creation of the network for the 1984-2003 window. ─────────────────────────── #>  #> ── Creation of the network for the 1985-2004 window. ─────────────────────────── #>  #> ── Creation of the network for the 1986-2005 window. ─────────────────────────── #>  #> ── Creation of the network for the 1987-2006 window. ─────────────────────────── #>  #> ── Creation of the network for the 1988-2007 window. ─────────────────────────── #>  #> ── Creation of the network for the 1989-2008 window. ─────────────────────────── #>  #> ── Creation of the network for the 1990-2009 window. ─────────────────────────── #>  #> ── Creation of the network for the 1991-2010 window. ─────────────────────────── #>  #> ── Creation of the network for the 1992-2011 window. ─────────────────────────── #>  #> ── Creation of the network for the 1993-2012 window. ─────────────────────────── #>  #> ── Creation of the network for the 1994-2013 window. ───────────────────────────  temporal_networks[[1]] #> # A tbl_graph: 74 nodes and 446 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 74 × 8 (active) #>   ID_Art     Author            Year Author_… Title     Journal     Type  time_w… #>   <chr>      <chr>            <int> <chr>    <chr>     <chr>       <chr> <chr>   #> 1 16182155   GORDON-R          1975 GORDON-… ALTERNAT… \"BROOKINGS… Stag… 1975-1… #> 2 26283591   GORDON-R          1975 GORDON-… THE IMPA… \"BROOKINGS… Stag… 1975-1… #> 3 16182201   OKUN-A            1975 OKUN-A-… INFLATIO… \"BROOKINGS… Stag… 1975-1… #> 4 47749045   BRONFENBRENNER-M  1976 BRONFEN… ELEMENTS… \"ZEITSCHRI… Stag… 1975-1… #> 5 1111111141 KARNOSKY-D        1976 KARNOSK… THE LINK… \"REVIEW\"    Stag… 1975-1… #> 6 1021902    FRIEDMAN-M        1977 FRIEDMA… NOBEL LE… \"THE JOURN… Stag… 1975-1… #> # … with 68 more rows #> # #> # Edge Data: 446 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     6    11 0.00158  1021902 1111111122 #> 2     6    45 0.000173 1021902 1111111128 #> 3     6    66 0.000430 1021902 1111111134 #> # … with 443 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Nodes and Edges of Networks or Alluvial — color_networks","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"color_networks() takes input tibble graph (tidygraph) list tibble graphs associates color graphs' edges nodes, depending chosen categorical variable columnr_to_color (likely cluster column). color_alluvial() takes data.frame associates color value chosen categorical variable column_to_color. function may used data.frame even aims coloring alluvial data frame created networks_to_alluv(). may either provide color palette, provide data frame associating different values categorical variable colors, let function provide colors (see details).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"","code":"color_networks(   graphs,   column_to_color,   color = NULL,   unique_color_across_list = FALSE )  color_alluvial(alluv_dt, column_to_color, color = NULL)"},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"graphs tibble graph tidygraph list tibble graphs. column_to_color column categorical variable use color nodes edges. instance, cluster_{clustering_method} created add_clusters() dynamic_cluster_{clustering_method} created merge_dynamic_clusters(). color colors use. may vector colors (character format) two columns data.frame first column distinct observations column_to_color second column vector colors want use. unique_color_across_list set TRUE, list tibble graphs, categorical variable considered different variable different graphs thus receive different color. words, set TRUE cluster \"01\" two different graphs two different colors. set FALSE (default), cluster \"01\" color every graphs exists. alluv_dt data.frame alluvial created networks_to_alluv()","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"tibble graph list tibble graphs input, new color column nodes edges.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"best practice provide list colors equals number categorical variable color. provide colors, excess colors used. provide less colors, colors recycled. provide colors, palette.colors() base R used: 7 colors ggplot2 palette used (black excluded) 7 colors Okabe-Ito palette (black gray excluded). 14 colors, colors two palettes recycled.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/color_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Nodes and Edges of Networks or Alluvial — color_networks","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE, verbose = FALSE)  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\", verbose = FALSE)  temporal_networks <- color_networks(graphs = temporal_networks, column_to_color = \"cluster_leiden\", color = NULL) #> ℹ unique_color_across_list has been set to FALSE. There are 6 different categories to color. #> ℹ color is neither a vector of color characters, nor a data.frame. We will proceed with base R colors. #> ℹ We draw 6 colors from the ggplot2 palette.  temporal_networks[[1]] #> # A tbl_graph: 74 nodes and 446 edges #> # #> # An undirected simple graph with 1 component #> # #> # Edge Data: 446 × 9 (active) #>    from    to   weight Source  Target     cluster_le… cluster_l… cluster… color  #>   <int> <int>    <dbl> <chr>   <chr>      <chr>       <chr>      <chr>    <chr>  #> 1     6    11 0.00158  1021902 1111111122 02          02         02       #00BA… #> 2     6    45 0.000173 1021902 1111111128 02          03         00       #7C98… #> 3     6    66 0.000430 1021902 1111111134 02          03         00       #7C98… #> 4     6    35 0.000644 1021902 1111111146 02          02         02       #00BA… #> 5     6    20 0.000126 1021902 1111111180 02          02         02       #00BA… #> 6     6    42 0.000614 1021902 1111111182 02          02         02       #00BA… #> # … with 440 more rows #> # #> # Node Data: 74 × 11 #>   ID_Art  Author  Year Author… Title Journal Type  time_w… cluste… size_c… color #>   <chr>   <chr>  <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>     <dbl> <chr> #> 1 161821… GORDO…  1975 GORDON… ALTE… BROOKI… Stag… 1975-1… 01        0.203 #619… #> 2 262835… GORDO…  1975 GORDON… THE … BROOKI… Stag… 1975-1… 01        0.203 #619… #> 3 161822… OKUN-A  1975 OKUN-A… INFL… BROOKI… Stag… 1975-1… 02        0.297 #00B… #> # … with 71 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Color Attribute For Network Communities — community_colors","title":"Creating Color Attribute For Network Communities — community_colors","text":"function takes input tidygraph graph, column community identifier node edge. attributes community color, depending palette chosen. two nodes connected edge different community, function mixes color two communities.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Color Attribute For Network Communities — community_colors","text":"","code":"community_colors(graph, palette, community_column = \"Com_ID\")"},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Color Attribute For Network Communities — community_colors","text":"graph tidygraph graph palette palette used attributing colors communities. use palette less color total number communities, communities represented color visualisation. community_column name column community identifier/number. defautl \"Com_ID\", name column use leiden_workflow() function detecting communities.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Color Attribute For Network Communities — community_colors","text":"tidygraph object new color column nodes side, community, new color_edges column edges side.","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating the Coordinates for Projecting Community Labels — community_labels","text":"","code":"community_labels(   graph,   biggest_community = FALSE,   community_threshold = 0.01,   community_name_column = \"Community_name\",   community_size_column = \"Size_com\" )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating the Coordinates for Projecting Community Labels — community_labels","text":"graph tidygraph object. biggest_community true, possibility remove smallest community, depending community_threshold set. community_threshold biggest_community true, function selects nodes belong communities represent least x% total number nodes. default, parameter set 1%. community_name_column Name column name community used label community_size_column Name column total number nodes share nodes community.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating the Coordinates for Projecting Community Labels — community_labels","text":"data.frame list communities names (biggest one biggest_community set TRUE) pair coordinates project names visualisation. also keeps color community size.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculating the Coordinates for Projecting Community Labels — community_labels","text":"simple function calculate mean coordinates x y community. coordinates used plot name community graph visualisation. run function calculating (x,y) coordinates nodes.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically Attributing Names to Communities — community_names","title":"Automatically Attributing Names to Communities — community_names","text":"function give community name node highest chosen measure. also gives edges name community. edge connects nodes different community, name NA. function takes account parameters chosen leiden_improved() function. chosen 2 3 levels resolution, repeats process second third resolution. words, 3 levels resolution, names communities first value Leiden resolution, also names second third values.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically Attributing Names to Communities — community_names","text":"","code":"community_names(   graph,   ordering_column,   naming = \"Label\",   community_column = \"Com_ID\" )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically Attributing Names to Communities — community_names","text":"graph tidygraph object. ordering_column Enter name column want used choose community name. instance, choose Degree, function takes value naming column node highest degree community name community. can use measure network centrality measures: instance, nodes articles, can use number citations articles. naming Enter name column want used naming community. function takes node highest centrality_measure chosen, use node value naming column  title community. instance, nodes individuals column called surname, can use column. community_column name community identifiers column.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically Attributing Names to Communities — community_names","text":"graph object column Community_name, well Community_2_name Community_3_name run leiden_workflow() function one resolution.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/community_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically Attributing Names to Communities — community_names","text":"attribute nodes edges names communities called Community_name. formed identifier community (Com_ID column) naming value. entered second third resolutions values leiden_improved() function, two supplementary columns: Community_2_name Community_3_name.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/dynamic_network_cooccurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","title":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","text":"function implemented earlier version development package. replaced networkflow::build_dynamic_networks(). function creates one several tidygraph networks table nodes directed edges. instance, bibliometric networks, can give list articles list references articles cite. can use build single network multiple networks different time windows.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/dynamic_network_cooccurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","text":"","code":"dynamic_network_cooccurrence(   nodes = NULL,   directed_edges = NULL,   source_column = NULL,   target_column = NULL,   time_variable = NULL,   time_window = NULL,   cooccurrence_method = c(\"coupling_angle\", \"coupling_strength\", \"coupling_similarity\"),   overlapping_window = FALSE,   edges_threshold = 1,   compute_size = FALSE,   keep_singleton = FALSE,   verbose = TRUE )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/dynamic_network_cooccurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","text":"nodes table nodes metadata. instance, nodes articles, table likely contain year publication, name authors, title article, etc... table must one row per node. directed_edges table elements nodes connected. nodes articles, directed_edges table can contain list references cited articles, authors written articles, affiliations authors articles. source_column column unique identifier node. instance, bibliographic coupling network, id citing documents. target_column column unique identifier element connected node (instance, identifier reference cited node node article). time_variable column temporal variable want use build windows succession networks. default, time_variable NULL function build one network without taking account temporal variable. time_window length network relatively unity time_variable column. use variable years time_variable set time_window 5, function build network five year windows. default, time_window NULL function build one network. cooccurrence_method Choose cooccurrence method build indirect edges table. function propose three methods depends biblionetwork package three methods implemented : coupling angle measure (see biblionetwork::biblio_coupling() documentation); coupling strength measure (biblionetwork::coupling_strength()); coupling similarity measure (biblionetwork:: coupling_similarity()). overlapping_window Set FALSE default. set TRUE, time_variable time_window NULL, function create succession networks moving time windows. windows moving one unit per one unit time_variable. instance, years, time_window set 5, creates networks successive time windows like 1970-1974, 1971-1975, 1972-1976, etc. edges_threshold Threshold value building edges. higher threshold, stronger links kept. See biblionetwork package documentation cooccurrence_method parameter. compute_size Set FALSE default. TRUE, function uses directed_edges data calculate many directed edges node receives (target). directed_edges table direct citations, functions calculates number time node cited nodes. need target_column nodes table make link targetted nodes directed_edges table. keep_singleton Set FALSE default. TRUE, function removes nodes undirected edges, .e. cooccurrence nodes. graphical terms, nodes alone network, link nodes. verbose Set FALSE want function display different sort information.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/dynamic_network_cooccurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","text":"time_window NULL, function computes one network return tidygraph object built tbl_graph(). time_variable time_window NULL, function returns list tidygraph networks, time window.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/dynamic_network_cooccurrence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Dynamic Networks from a List of Nodes and Directed Edges — dynamic_network_cooccurrence","text":"","code":"nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- dynamic_network_cooccurrence(nodes = nodes, directed_edges = references, source_column = \"ID_Art\", target_column = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = NULL, edges_threshold = 1, compute_size = FALSE, keep_singleton = FALSE, overlapping_window = TRUE) #> Warning: `dynamic_network_cooccurrence()` was deprecated in networkflow 0.1.0. #> ℹ Please use `build_dynamic_networks()` instead. #> Creation of the network for the 1975-2013 window. #> We remove the nodes that are alone with no edge.  #>"},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting TF-IDF Values for Ngrams — extract_tfidf","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"function takes input tibble graph (tidygraph), list tibble graphs data frame, extract ngrams text column(s) choice, calculates Term-Frequency Inverse-Document-Frequency value ngram grouping variables chosen.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"","code":"extract_tfidf(   data,   text_columns,   grouping_columns,   grouping_across_list = FALSE,   n_gram = 2L,   stopwords_type = \"smart\",   stopwords_vector = NULL,   clean_word_method = c(\"lemmatize\", \"stemming\", \"none\"),   ngrams_filter = 5L,   nb_terms = 5L )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"data tibble graph tidygraph, list tibble graphs data frame. text_columns columns text want analyze. give multiple columns, united extract terms. grouping_columns column(s) want use calculate tf-idf. columns become \"document\" unit tidytext::bind_tf_idf() function. instance, run function unique tibble graph, may want compute tf-idf depending clusters nodes belonging. take care identifier variable using compute tf-idf unique group (see details information). grouping_across_list Set TRUE want compute tf-idf whole list tibble graphs unique identifier (see details information). n_gram maximum n want tokenizing ngrams (see tidytext::unnest_tokens() information). 2 default, .e. unigrams bigrams extracted. stopwords_type type stopwords list want use remove stopwords ngrams. \"smart\" list chosen default, see possilities stopwords::stopwords_getsources. stopwords_vector Use stopwords list, vector strings format. clean_word_method Choose method clean standardized ngrams. can lemmatize stem words textstem package. Choose \"none\" want apply cleaning method. ngrams_filter can exclude tf-idf computation ngrams appear certain number time whole corpus. nb_terms functions extracts nb_terms (5 default) highest TF-IDF grouping variables.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"data.table terms (.e. ngrams) appearing \"document\" (grouping_columns) number time appear per document (n), term frequency (tf), inverse document frequency (idf), term-frequency inverse-document-frequency (tf_idf). terms highest tf_idf value value grouping columns, depending nb_words value set. instance, nb_words set 5 (default valuet), compute TF-IDF cluster variable, function extracts 5 terms highest TF-IDF value cluster.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"functions extract TF-IDF values various types input, multiple text columns grouping multiple columns. simple case use function data frame unique tibble graph easily identifiable grouping variable (like cluster). also allows complex uses case list tibble graphs. enter input list tibble graphs, function extracts TF-IDF binded graphs, graph graph. want extract TF-IDF graphs separately, use lapply() apply extract_tfidf() graph: input unique tibble graph, operation repeated tibble graphs list. extraction TF-IDF made whole aggregated list, choose carefully grouping_columns. Indeed, grouping columns must identify variables unique. instance, case used add_clusters(), node graph associated cluster. identifier clusters (\"01\", \"02\", \"03\", etc.) across tibble graphs. means \"01\" clusters grouped together, something want. case, set grouping_across_list TRUE: identifier cluster merged name corresponding tibble_graph list. However, need use possibility unique identifier across tibble graphs. case, instance, use merge_dynamic_clusters(), column clusters merged across different tibble graphs. new inter-networks clusters constitute unique identifier. TF-IDF calculated number occurrence term document. terms occur removed avoid rare terms appear top grouping variables.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/extract_tfidf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting TF-IDF Values for Ngrams — extract_tfidf","text":"","code":"nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 10, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE) #> ℹ The method use for co-occurence is the coupling_similarity method. #> ℹ The edge threshold is: 1. #> ℹ We remove the nodes that are alone with no edge.  #>  #> ── Creation of the network for the 1975-1984 window. ─────────────────────────── #>  #> ── Creation of the network for the 1976-1985 window. ─────────────────────────── #>  #> ── Creation of the network for the 1977-1986 window. ─────────────────────────── #>  #> ── Creation of the network for the 1978-1987 window. ─────────────────────────── #>  #> ── Creation of the network for the 1979-1988 window. ─────────────────────────── #>  #> ── Creation of the network for the 1980-1989 window. ─────────────────────────── #>  #> ── Creation of the network for the 1981-1990 window. ─────────────────────────── #>  #> ── Creation of the network for the 1982-1991 window. ─────────────────────────── #>  #> ── Creation of the network for the 1983-1992 window. ─────────────────────────── #>  #> ── Creation of the network for the 1984-1993 window. ─────────────────────────── #>  #> ── Creation of the network for the 1985-1994 window. ─────────────────────────── #>  #> ── Creation of the network for the 1986-1995 window. ─────────────────────────── #>  #> ── Creation of the network for the 1987-1996 window. ─────────────────────────── #>  #> ── Creation of the network for the 1988-1997 window. ─────────────────────────── #>  #> ── Creation of the network for the 1989-1998 window. ─────────────────────────── #>  #> ── Creation of the network for the 1990-1999 window. ─────────────────────────── #>  #> ── Creation of the network for the 1991-2000 window. ─────────────────────────── #>  #> ── Creation of the network for the 1992-2001 window. ─────────────────────────── #>  #> ── Creation of the network for the 1993-2002 window. ─────────────────────────── #>  #> ── Creation of the network for the 1994-2003 window. ─────────────────────────── #>  #> ── Creation of the network for the 1995-2004 window. ─────────────────────────── #>  #> ── Creation of the network for the 1996-2005 window. ─────────────────────────── #>  #> ── Creation of the network for the 1997-2006 window. ─────────────────────────── #>  #> ── Creation of the network for the 1998-2007 window. ─────────────────────────── #>  #> ── Creation of the network for the 1999-2008 window. ─────────────────────────── #>  #> ── Creation of the network for the 2000-2009 window. ─────────────────────────── #>  #> ── Creation of the network for the 2001-2010 window. ─────────────────────────── #>  #> ── Creation of the network for the 2002-2011 window. ─────────────────────────── #>  #> ── Creation of the network for the 2003-2012 window. ─────────────────────────── #>  #> ── Creation of the network for the 2004-2013 window. ───────────────────────────  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\") #>  #> ── Cluster detection for the \"1975-1984\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"39.1%\" of the network. #>  #> ── Cluster detection for the \"1976-1985\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"24.6%\" of the network. #>  #> ── Cluster detection for the \"1977-1986\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"26.2%\" of the network. #>  #> ── Cluster detection for the \"1978-1987\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"28.6%\" of the network. #>  #> ── Cluster detection for the \"1979-1988\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"35.4%\" of the network. #>  #> ── Cluster detection for the \"1980-1989\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1981-1990\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"37%\" of the network. #>  #> ── Cluster detection for the \"1982-1991\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.1%\" of the network. #>  #> ── Cluster detection for the \"1983-1992\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"42.9%\" of the network. #>  #> ── Cluster detection for the \"1984-1993\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1985-1994\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"57.1%\" of the network. #>  #> ── Cluster detection for the \"1986-1995\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"57.1%\" of the network. #>  #> ── Cluster detection for the \"1987-1996\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"62.5%\" of the network. #>  #> ── Cluster detection for the \"1988-1997\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"36.4%\" of the network. #>  #> ── Cluster detection for the \"1989-1998\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"45.5%\" of the network. #>  #> ── Cluster detection for the \"1990-1999\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"46.2%\" of the network. #>  #> ── Cluster detection for the \"1991-2000\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.9%\" of the network. #>  #> ── Cluster detection for the \"1992-2001\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"35%\" of the network. #>  #> ── Cluster detection for the \"1993-2002\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40.7%\" of the network. #>  #> ── Cluster detection for the \"1994-2003\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.7%\" of the network. #>  #> ── Cluster detection for the \"1995-2004\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.9%\" of the network. #>  #> ── Cluster detection for the \"1996-2005\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40.5%\" of the network. #>  #> ── Cluster detection for the \"1997-2006\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1998-2007\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"39.6%\" of the network. #>  #> ── Cluster detection for the \"1999-2008\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"39.1%\" of the network. #>  #> ── Cluster detection for the \"2000-2009\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"49%\" of the network. #>  #> ── Cluster detection for the \"2001-2010\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"45.7%\" of the network. #>  #> ── Cluster detection for the \"2002-2011\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"50%\" of the network. #>  #> ── Cluster detection for the \"2003-2012\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"55.3%\" of the network. #>  #> ── Cluster detection for the \"2004-2013\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"54.8%\" of the network.  tfidf <- extract_tfidf(temporal_networks, n_gram = 4, text_columns = \"Title\", grouping_columns = \"cluster_leiden\", grouping_across_list = TRUE, clean_word_method = \"lemmatise\") #> Warning: Invalid .internal.selfref detected and fixed by taking a (shallow) copy of the data.table so that := can add this new column by reference. At an earlier point, this data.table has been copied by R (or was created manually using structure() or similar). Avoid names<- and attr<- which in R currently (and oddly) may copy the whole data.table. Use set* syntax instead to avoid copying: ?set, ?setnames and ?setattr. If this message doesn't help, please report your use case to the data.table issue tracker so the root cause can be fixed or this message improved.  tfidf[[1]] #>   [1] \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" #>   [7] \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" #>  [13] \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1975-1984\" #>  [19] \"1975-1984\" \"1975-1984\" \"1975-1984\" \"1976-1985\" \"1976-1985\" \"1976-1985\" #>  [25] \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" #>  [31] \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" #>  [37] \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" #>  [43] \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1976-1985\" \"1977-1986\" #>  [49] \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" #>  [55] \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" #>  [61] \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" #>  [67] \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" \"1977-1986\" #>  [73] \"1977-1986\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" #>  [79] \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" #>  [85] \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" #>  [91] \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1978-1987\" #>  [97] \"1978-1987\" \"1978-1987\" \"1978-1987\" \"1979-1988\" \"1979-1988\" \"1979-1988\" #> [103] \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" #> [109] \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" #> [115] \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" \"1979-1988\" #> [121] \"1979-1988\" \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" #> [127] \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" #> [133] \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1980-1989\" \"1981-1990\" \"1981-1990\" #> [139] \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" #> [145] \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" \"1981-1990\" #> [151] \"1981-1990\" \"1981-1990\" \"1982-1991\" \"1982-1991\" \"1982-1991\" \"1982-1991\" #> [157] \"1982-1991\" \"1982-1991\" \"1982-1991\" \"1982-1991\" \"1982-1991\" \"1982-1991\" #> [163] \"1982-1991\" \"1982-1991\" \"1982-1991\" \"1983-1992\" \"1983-1992\" \"1983-1992\" #> [169] \"1983-1992\" \"1983-1992\" \"1983-1992\" \"1983-1992\" \"1983-1992\" \"1983-1992\" #> [175] \"1983-1992\" \"1983-1992\" \"1983-1992\" \"1984-1993\" \"1984-1993\" \"1984-1993\" #> [181] \"1984-1993\" \"1984-1993\" \"1984-1993\" \"1984-1993\" \"1984-1993\" \"1984-1993\" #> [187] \"1984-1993\" \"1984-1993\" \"1985-1994\" \"1985-1994\" \"1985-1994\" \"1985-1994\" #> [193] \"1986-1995\" \"1986-1995\" \"1986-1995\" \"1987-1996\" \"1987-1996\" \"1987-1996\" #> [199] \"1987-1996\" \"1988-1997\" \"1988-1997\" \"1988-1997\" \"1988-1997\" \"1988-1997\" #> [205] \"1988-1997\" \"1988-1997\" \"1988-1997\" \"1989-1998\" \"1989-1998\" \"1989-1998\" #> [211] \"1989-1998\" \"1989-1998\" \"1989-1998\" \"1989-1998\" \"1989-1998\" \"1990-1999\" #> [217] \"1990-1999\" \"1990-1999\" \"1990-1999\" \"1990-1999\" \"1990-1999\" \"1990-1999\" #> [223] \"1990-1999\" \"1991-2000\" \"1991-2000\" \"1991-2000\" \"1991-2000\" \"1991-2000\" #> [229] \"1991-2000\" \"1991-2000\" \"1991-2000\" \"1991-2000\" \"1991-2000\" \"1991-2000\" #> [235] \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" #> [241] \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1992-2001\" #> [247] \"1992-2001\" \"1992-2001\" \"1992-2001\" \"1993-2002\" \"1993-2002\" \"1993-2002\" #> [253] \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" #> [259] \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" \"1993-2002\" #> [265] \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" #> [271] \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1994-2003\" #> [277] \"1994-2003\" \"1994-2003\" \"1994-2003\" \"1995-2004\" \"1995-2004\" \"1995-2004\" #> [283] \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" #> [289] \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" \"1995-2004\" #> [295] \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" #> [301] \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1996-2005\" #> [307] \"1996-2005\" \"1996-2005\" \"1996-2005\" \"1997-2006\" \"1997-2006\" \"1997-2006\" #> [313] \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" #> [319] \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" \"1997-2006\" #> [325] \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" #> [331] \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1998-2007\" #> [337] \"1998-2007\" \"1998-2007\" \"1998-2007\" \"1999-2008\" \"1999-2008\" \"1999-2008\" #> [343] \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" #> [349] \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" #> [355] \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"1999-2008\" \"2000-2009\" #> [361] \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" #> [367] \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" \"2000-2009\" #> [373] \"2000-2009\" \"2000-2009\" \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" #> [379] \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" #> [385] \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2001-2010\" \"2002-2011\" #> [391] \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" #> [397] \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" \"2002-2011\" #> [403] \"2002-2011\" \"2002-2011\" \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" #> [409] \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" #> [415] \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2003-2012\" \"2004-2013\" #> [421] \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" #> [427] \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" \"2004-2013\" #> [433] \"2004-2013\" \"2004-2013\""},{"path":"https://agoutsmedt.github.io/networkflow/reference/filter_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering Network Components — filter_components","title":"Filtering Network Components — filter_components","text":"function deprecated replaced networkflow::extract_main_component(). function ) creates tidygraph graph using tbl_graph(); ii) keeps main components graph, using main_components(); iii) warns user first biggest component removed large.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/filter_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering Network Components — filter_components","text":"","code":"filter_components(   graphs,   nb_components = 1,   threshold_alert = 0.05,   keep_component_columns = FALSE )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/filter_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering Network Components — filter_components","text":"graphs tibble graph tidygraph, list tibble graphs data frame. nb_components default, function takes main component graph (nb_components = 1). However possible take many components wish. first component largest one, component 2 second one, etc. threshold_alert biggest component last one selected (default, nb_component = 1) gathers x% (default, 5%) total number nodes, function triggers warning inform user removed big component network. keep_component_columns Set TRUE want store tibble graph components number size components.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/filter_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filtering Network Components — filter_components","text":"tidygraph object list tidygraph objects nodes","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/filter_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filtering Network Components — filter_components","text":"function automatically rename first column nodes \"Id\".","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/intertemporal_cluster_naming.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","title":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","text":"function creates new column \"intertemporal_name\" network list temporal networks identify similar clusters across time. function gives name two clusters two succesive temporal networks match conditions defined user: threshold_similarity, cluster_colum similarity_type.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/intertemporal_cluster_naming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","text":"","code":"intertemporal_cluster_naming(   list_graph = NA,   cluster_column = NA,   node_key = NA,   threshold_similarity = 0.5001,   similarity_type = c(\"complete, partial\") )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/intertemporal_cluster_naming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","text":"list_graph list networks. list expected ordered sequential order oldest recent network. cluster_column column identifier cluster. node_key column unique identifier node. threshold_similarity threshold_similarity variable defines sensitive function giving name two clusters. higher threshold lead communities. example, two temporal networks two communities . Communities B older network, communities ' B' recent network. threshold 0.51 \"complete\" similarity_type means community ' given name 51% nodes ' recent network originate older network, 51% node older network becomes ' recent network. similarity_type Choose similarity type compare threshold : \"complete\" similarity compute share nodes going older community recent community nodes networks \"partial\" similarity compute share nodes going older community recent community nodes exists networks Complete similarity particularly suited number nodes networks relatively stable time threshold capture share nodes moving clusters. Partial similarity can particularly useful number nodes networks increases rapidly. interpretation threshold captures share nodes existing networks moving clusters. example, complete similarity threshold 0.51, (1) nodes community network t-1 go community ' network t+1, (2) nodes community ' present network t-1 originate community , (3) number nodes ' twice new nodes exists t-1, ' never meet threshold requirement named despite strong similarity two clusters. Conceptually, might desired behavior function one might considered ' different considered cluster composition changed new nodes. case complete similarity right choice. However, one consider ' similar nodes exists networks identified part community, partial threshold similarity desirable.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/intertemporal_cluster_naming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","text":"function returns list networks used input list_graph new column intertemporal_name. column result inter-temporal grouping original clusters cluster_column.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/intertemporal_cluster_naming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Similar Clusters across Multiple Temporal Networks — intertemporal_cluster_naming","text":"","code":"library(biblionetwork) library(magrittr) library(tidygraph) #>  #> Attaching package: ‘tidygraph’ #> The following object is masked from ‘package:stats’: #>  #>     filter  nodes <- Nodes_stagflation %>% dplyr::rename(ID_Art = ItemID_Ref) %>% dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation %>% dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- dynamic_network_cooccurrence(nodes = nodes, directed_edges = references, source_column = \"ID_Art\", target_column = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 15, edges_threshold = 1, compute_size = FALSE, keep_singleton = FALSE, overlapping_window = TRUE) #> Creation of the network for the 1975-1989 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1976-1990 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1977-1991 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1978-1992 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1979-1993 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1980-1994 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1981-1995 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1982-1996 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1983-1997 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1984-1998 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1985-1999 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1986-2000 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1987-2001 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1988-2002 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1989-2003 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1990-2004 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1991-2005 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1992-2006 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1993-2007 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1994-2008 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1995-2009 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1996-2010 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1997-2011 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1998-2012 window. #> We remove the nodes that are alone with no edge.  #>  #> Creation of the network for the 1999-2013 window. #> We remove the nodes that are alone with no edge.  #>   temporal_networks <- lapply(temporal_networks,                                     function(tbl) tbl %N>%                                                   mutate(clusters = tidygraph::group_louvain()))  intertemporal_cluster_naming(temporal_networks, cluster_column = \"clusters\", node_key = \"ID_Art\", threshold_similarity = 0.51, similarity_type = \"partial\") #> Warning: `intertemporal_cluster_naming()` was deprecated in networkflow 0.1.0. #> ℹ Please use `merge_dynamic_clusters()` instead. #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> Joining with `by = join_by(clusters)` #> $`1975-1989` #> # A tbl_graph: 71 nodes and 435 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 71 × 10 (active) #>   ID_Art     Author   Year Author… Title  Journal  Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>   <chr>  <chr>    <chr> <chr>   <chr>   <chr>   #> 1 16182155   GORDON…  1975 GORDON… ALTER… \"BROOKI… Stag… 1975-1… 3       cl_3    #> 2 26283591   GORDON…  1975 GORDON… THE I… \"BROOKI… Stag… 1975-1… 3       cl_3    #> 3 16182201   OKUN-A   1975 OKUN-A… INFLA… \"BROOKI… Stag… 1975-1… 2       cl_2    #> 4 47749045   BRONFE…  1976 BRONFE… ELEME… \"ZEITSC… Stag… 1975-1… 2       cl_2    #> 5 1111111141 KARNOS…  1976 KARNOS… THE L… \"REVIEW\" Stag… 1975-1… 4       cl_4    #> 6 1021902    FRIEDM…  1977 FRIEDM… NOBEL… \"THE JO… Stag… 1975-1… 2       cl_2    #> # … with 65 more rows #> # #> # Edge Data: 435 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     6    11 0.00158  1021902 1111111122 #> 2     6    45 0.000173 1021902 1111111128 #> 3     6    66 0.000430 1021902 1111111134 #> # … with 432 more rows #>  #> $`1976-1990` #> # A tbl_graph: 66 nodes and 385 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 66 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 1111111141 KARNOS…  1976 KARNOSK… THE L… \"REVIE… Stag… 1976-1… 2       cl_4    #> 2 1021902    FRIEDM…  1977 FRIEDMA… NOBEL… \"THE J… Stag… 1976-1… 1       cl_7    #> 3 5200398    GOLDST…  1977 GOLDSTE… DOWNW… \"STAFF… Stag… 1976-1… 1       cl_7    #> 4 31895842   GORDON…  1977 GORDON-… CAN T… \"BROOK… Stag… 1976-1… 4       cl_3    #> 5 14371908   RASCHE…  1977 RASCHE-… THE E… \"\"      Stag… 1976-1… 3       cl_1    #> 6 1111111122 CARLSO…  1978 CARLSON… INFLA… \"FEDER… Stag… 1976-1… 1       cl_7    #> # … with 60 more rows #> # #> # Edge Data: 385 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     2     6 0.00161  1021902 1111111122 #> 2     2    40 0.000174 1021902 1111111128 #> 3     2    61 0.000436 1021902 1111111134 #> # … with 382 more rows #>  #> $`1977-1991` #> # A tbl_graph: 66 nodes and 384 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 66 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 1021902    FRIEDM…  1977 FRIEDMA… NOBEL… \"THE J… Stag… 1977-1… 1       cl_7    #> 2 5200398    GOLDST…  1977 GOLDSTE… DOWNW… \"STAFF… Stag… 1977-1… 1       cl_7    #> 3 31895842   GORDON…  1977 GORDON-… CAN T… \"BROOK… Stag… 1977-1… 4       cl_3    #> 4 14371908   RASCHE…  1977 RASCHE-… THE E… \"\"      Stag… 1977-1… 2       cl_1    #> 5 1111111122 CARLSO…  1978 CARLSON… INFLA… \"FEDER… Stag… 1977-1… 1       cl_7    #> 6 1111111131 ECKSTE…  1978 ECKSTEI… THE G… \"\"      Stag… 1977-1… 4       cl_3    #> # … with 60 more rows #> # #> # Edge Data: 384 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     1     5 0.00161  1021902 1111111122 #> 2     1    39 0.000174 1021902 1111111128 #> 3     1    60 0.000436 1021902 1111111134 #> # … with 381 more rows #>  #> $`1978-1992` #> # A tbl_graph: 61 nodes and 341 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 61 × 10 (active) #>   ID_Art     Author   Year Author… Title  Journal  Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>   <chr>  <chr>    <chr> <chr>   <chr>   <chr>   #> 1 1111111122 CARLSO…  1978 CARLSO… INFLA… \"FEDERA… Stag… 1978-1… 1       cl_7    #> 2 1111111131 ECKSTE…  1978 ECKSTE… THE G… \"\"       Stag… 1978-1… 4       cl_3    #> 3 9756183    FAIR-R   1978 FAIR-R… INFLA… \"AFTER … Stag… 1978-1… 1       cl_7    #> 4 1111111150 MORK-K   1978 MORK-K… THE I… \"\"       Stag… 1978-1… 4       cl_3    #> 5 16182206   PERRY-G  1978 PERRY-… SLOWI… \"BROOKI… Stag… 1978-1… 4       cl_3    #> 6 2207592    PHELPS…  1978 PHELPS… COMMO… \"JOURNA… Stag… 1978-1… 1       cl_7    #> # … with 55 more rows #> # #> # Edge Data: 341 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    24    35 0.000497 10585974 1111111128 #> 2     2    24 0.000167 10585974 1111111131 #> 3    24    37 0.00188  10585974 1111111137 #> # … with 338 more rows #>  #> $`1979-1993` #> # A tbl_graph: 51 nodes and 255 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 51 × 10 (active) #>   ID_Art   Author   Year Author_… Title   Journal  Type  time_w… cluste… intert… #>   <chr>    <chr>   <int> <chr>    <chr>   <chr>    <chr> <chr>   <chr>   <chr>   #> 1 5240516  BLINDE…  1979 BLINDER… ECONOM… \"\"       Stag… 1979-1… 3       cl_3    #> 2 6119013  BRUNO-M  1979 BRUNO-M… MACRO-… \"\"       Stag… 1979-1… 5       cl_19   #> 3 31502746 GRAMLI…  1979 GRAMLIC… MACRO … \"BROOKI… Stag… 1979-1… 4       cl_7    #> 4 18541214 NORSWO…  1979 NORSWOR… THE SL… \"\"       Stag… 1979-1… 1       cl_1    #> 5 20623867 SACHS-J  1979 SACHS-J… WAGES,… \"BROOKI… Stag… 1979-1… 2       cl_4    #> 6 33940681 TATOM-J  1979 TATOM-J… THE PR… \"\"       Stag… 1979-1… 1       cl_1    #> # … with 45 more rows #> # #> # Edge Data: 255 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    13    23 0.000554 10585974 1111111128 #> 2    13    25 0.00203  10585974 1111111137 #> 3    13    19 0.00259  10585974 1111111160 #> # … with 252 more rows #>  #> $`1980-1994` #> # A tbl_graph: 43 nodes and 171 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 43 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 37095547   ATESOG…  1980 ATESOGL… INFLA… \"JOURN… Stag… 1980-1… 3       cl_7    #> 2 1172921    BRANSO…  1980 BRANSON… INTER… \"\"      Stag… 1980-1… 4       cl_25   #> 3 14490177   BRUNNE…  1980 BRUNNER… STAGF… \"JOURN… Stag… 1980-1… 4       cl_25   #> 4 14371905   BRUNO-M  1980 BRUNO-M… IMPOR… \"THE E… Stag… 1980-1… 2       cl_1    #> 5 10585974   FRYE-J   1980 FRYE-J-… THE V… \"\"      Stag… 1980-1… 5       cl_3    #> 6 1111111146 LEIJON…  1980 LEIJONH… THEOR… \"REVUE… Stag… 1980-1… 1       cl_4    #> # … with 37 more rows #> # #> # Edge Data: 171 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1     5    15 0.000604 10585974 1111111128 #> 2     5    17 0.00222  10585974 1111111137 #> 3     5    11 0.00269  10585974 1111111160 #> # … with 168 more rows #>  #> $`1981-1995` #> # A tbl_graph: 32 nodes and 106 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 32 × 10 (active) #>   ID_Art     Author     Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>      <chr>     <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 25091445   BLINDER-A  1981 BLINDE… \"THE… \"\"      Stag… 1981-1… 4       cl_3    #> 2 1111111128 DARBY-M    1981 DARBY-… \"THE… \"\"      Stag… 1981-1… 2       cl_30   #> 3 38951845   FRYE-J     1981 FRYE-J… \"GOV… \"THE A… Stag… 1981-1… 4       cl_3    #> 4 1111111137 GORDON-R   1981 GORDON… \"INF… \"NBER … Stag… 1981-1… 4       cl_3    #> 5 16001640   LUTZ-MA    1981 LUTZ-M… \"STA… \"\"      Stag… 1981-1… 1       cl_4    #> 6 5315078    RASCHE-R   1981 RASCHE… \"ENE… \"CARNE… Stag… 1981-1… 2       cl_30   #> # … with 26 more rows #> # #> # Edge Data: 106 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    29    32 0.000428 10729971 1111111176 #> 2    21    32 0.000428 10729971 16167977   #> 3    30    32 0.00120  10729971 19627977   #> # … with 103 more rows #>  #> $`1982-1996` #> # A tbl_graph: 26 nodes and 78 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 26 × 10 (active) #>   ID_Art   Author      Year Author_… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>      <int> <chr>    <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 42623802 BLAAS-W     1982 BLAAS-W… INST… \"JOURN… Stag… 1982-1… 1       cl_30   #> 2 31895841 BLINDER-A   1982 BLINDER… THE … \"INFLA… Stag… 1982-1… 4       cl_34   #> 3 1184127  DARBY-M     1982 DARBY-M… THE … \"THE A… Stag… 1982-1… 1       cl_30   #> 4 14576298 GRUBB-D     1982 GRUBB-D… CAUS… \"THE R… Stag… 1982-1… 1       cl_30   #> 5 33117553 KOURI-PJK   1982 KOURI-P… MACR… \"AMERI… Stag… 1982-1… 4       cl_34   #> 6 16995857 NORDHAUS-W  1982 NORDHAU… ECON… \"EUROP… Stag… 1982-1… 2       cl_1    #> # … with 20 more rows #> # #> # Edge Data: 78 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    22    25 0.000436 10729971 1111111176 #> 2    14    25 0.000436 10729971 16167977   #> 3    23    25 0.00122  10729971 19627977   #> # … with 75 more rows #>  #> $`1983-1997` #> # A tbl_graph: 22 nodes and 69 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 22 × 10 (active) #>   ID_Art   Author       Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>       <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 7815498  DENISON-E    1983 DENISO… THE … \"THE E… Stag… 1983-1… 2       cl_1    #> 2 5982867  GYLFASON-T   1983 GYLFAS… DOES… \"CANAD… Stag… 1983-1… 2       cl_1    #> 3 4189938  LINDBECK-A   1983 LINDBE… THE … \"THE E… Stag… 1983-1… 2       cl_1    #> 4 5160307  MCCALLUM-C   1983 MCCALL… INFL… \"THE E… Stag… 1983-1… 3       cl_30   #> 5 17500902 ROTEMBERG-J  1983 ROTEMB… SUPP… \"JOURN… Stag… 1983-1… 3       cl_30   #> 6 2901822  BRUNO-M      1984 BRUNO-… RAW … \"THE Q… Stag… 1983-1… 2       cl_1    #> # … with 16 more rows #> # #> # Edge Data: 69 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    15    18 0.000353 10729971 1111111176 #> 2     7    18 0.000400 10729971 16167977   #> 3    16    18 0.00123  10729971 19627977   #> # … with 66 more rows #>  #> $`1984-1998` #> # A tbl_graph: 19 nodes and 67 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 19 × 10 (active) #>   ID_Art     Author     Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>      <chr>     <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 2901822    BRUNO-M    1984 BRUNO-… RAW … \"THE Q… Stag… 1984-1… 1       cl_40   #> 2 16167977   GORDON-R   1984 GORDON… SUPP… \"THE A… Stag… 1984-1… 1       cl_40   #> 3 1111111134 FISCHER-S  1985 FISCHE… SUPP… \"JOURN… Stag… 1984-1… 1       cl_40   #> 4 40564631   MARTIN-LW  1985 MARTIN… STAG… \"AMERI… Stag… 1984-1… 2       cl_4    #> 5 1184130    GISSER-M   1986 GISSER… CRUD… \"JOURN… Stag… 1984-1… 1       cl_40   #> 6 25481516   HAKES-DR   1988 HAKES-… EVID… \"REVIE… Stag… 1984-1… 1       cl_40   #> # … with 13 more rows #> # #> # Edge Data: 67 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1    10    13 0.000277 10729971 1111111176 #> 2     2    13 0.000353 10729971 16167977   #> 3    13    19 0.00147  10729971 17355017   #> # … with 64 more rows #>  #> $`1985-1999` #> # A tbl_graph: 18 nodes and 65 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 18 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 1111111134 FISCHE…  1985 FISCHER… SUPPL… \"JOURN… Stag… 1985-1… 2       cl_42   #> 2 40564631   MARTIN…  1985 MARTIN-… STAGF… \"AMERI… Stag… 1985-1… 1       cl_4    #> 3 1184130    GISSER…  1986 GISSER-… CRUDE… \"JOURN… Stag… 1985-1… 3       cl_40   #> 4 25481516   HAKES-…  1988 HAKES-D… EVIDE… \"REVIE… Stag… 1985-1… 2       cl_42   #> 5 6714008    HELLIW…  1988 HELLIWE… COMPA… \"JOURN… Stag… 1985-1… 3       cl_40   #> 6 214927     BALL-L   1991 BALL-L-… THE G… \"JOURN… Stag… 1985-1… 2       cl_42   #> # … with 12 more rows #> # #> # Edge Data: 65 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1     7    10 0.000282 10729971 1111111176 #> 2    10    16 0.00149  10729971 17355017   #> 3     8    10 0.00112  10729971 19627977   #> # … with 62 more rows #>  #> $`1986-2000` #> # A tbl_graph: 21 nodes and 107 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 21 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 1184130    GISSER…  1986 GISSER-… CRUDE… \"JOURN… Stag… 1986-2… 3       cl_40   #> 2 25481516   HAKES-…  1988 HAKES-D… EVIDE… \"REVIE… Stag… 1986-2… 1       cl_4    #> 3 6714008    HELLIW…  1988 HELLIWE… COMPA… \"JOURN… Stag… 1986-2… 3       cl_40   #> 4 214927     BALL-L   1991 BALL-L-… THE G… \"JOURN… Stag… 1986-2… 1       cl_4    #> 5 1111111176 TAYLOR…  1992 TAYLOR-… THE G… \"RESER… Stag… 1986-2… 1       cl_4    #> 6 19627977   PARKIN…  1993 PARKIN-… INFLA… \"PRICE… Stag… 1986-2… 3       cl_40   #> # … with 15 more rows #> # #> # Edge Data: 107 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1     8    20 0.000132 10729971 1111111143 #> 2     5     8 0.000269 10729971 1111111176 #> 3     8    19 0.00102  10729971 15559333   #> # … with 104 more rows #>  #> $`1987-2001` #> # A tbl_graph: 24 nodes and 125 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 24 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 25481516   HAKES-…  1988 HAKES-D… EVIDE… \"REVIE… Stag… 1987-2… 3       cl_4    #> 2 6714008    HELLIW…  1988 HELLIWE… COMPA… \"JOURN… Stag… 1987-2… 2       cl_40   #> 3 1717556    OLSON-M  1988 OLSON-M… THE P… \"JOURN… Stag… 1987-2… 2       cl_40   #> 4 214927     BALL-L   1991 BALL-L-… THE G… \"JOURN… Stag… 1987-2… 3       cl_4    #> 5 1111111176 TAYLOR…  1992 TAYLOR-… THE G… \"RESER… Stag… 1987-2… 3       cl_4    #> 6 19627977   PARKIN…  1993 PARKIN-… INFLA… \"PRICE… Stag… 1987-2… 2       cl_40   #> # … with 18 more rows #> # #> # Edge Data: 125 × 5 #>    from    to   weight Source   Target     #>   <int> <int>    <dbl> <chr>    <chr>      #> 1     8    20 0.000133 10729971 1111111143 #> 2     5     8 0.000253 10729971 1111111176 #> 3     8    19 0.000992 10729971 15559333   #> # … with 122 more rows #>  #> $`1988-2002` #> # A tbl_graph: 32 nodes and 231 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 32 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 25481516   HAKES-…  1988 HAKES-D… EVIDE… \"REVIE… Stag… 1988-2… 1       cl_4    #> 2 6714008    HELLIW…  1988 HELLIWE… COMPA… \"JOURN… Stag… 1988-2… 3       cl_40   #> 3 1717556    OLSON-M  1988 OLSON-M… THE P… \"JOURN… Stag… 1988-2… 3       cl_40   #> 4 214927     BALL-L   1991 BALL-L-… THE G… \"JOURN… Stag… 1988-2… 1       cl_4    #> 5 1111111176 TAYLOR…  1992 TAYLOR-… THE G… \"RESER… Stag… 1988-2… 1       cl_4    #> 6 19627977   PARKIN…  1993 PARKIN-… INFLA… \"PRICE… Stag… 1988-2… 1       cl_4    #> # … with 26 more rows #> # #> # Edge Data: 231 × 5 #>    from    to   weight Source    Target     #>   <int> <int>    <dbl> <chr>     <chr>      #> 1    26    31 0.000840 101742296 105203321  #> 2    20    31 0.000391 101742296 1111111143 #> 3    19    31 0.00251  101742296 15559333   #> # … with 228 more rows #>  #> $`1989-2003` #> # A tbl_graph: 34 nodes and 305 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 34 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 214927     BALL-L   1991 BALL-L-… THE G… JOURNA… Stag… 1989-2… 2       cl_4    #> 2 1111111176 TAYLOR…  1992 TAYLOR-… THE G… RESERV… Stag… 1989-2… 2       cl_4    #> 3 19627977   PARKIN…  1993 PARKIN-… INFLA… PRICE … Stag… 1989-2… 2       cl_4    #> 4 2207578    BALL-L   1995 BALL-L-… RELAT… THE QU… Stag… 1989-2… 2       cl_4    #> 5 10729971   BALL-L   1995 BALL-L-… TIME-… JOURNA… Stag… 1989-2… 2       cl_4    #> 6 24669774   ROTEMB…  1996 ROTEMBE… IMPER… JOURNA… Stag… 1989-2… 3       cl_40   #> # … with 28 more rows #> # #> # Edge Data: 305 × 5 #>    from    to   weight Source    Target     #>   <int> <int>    <dbl> <chr>     <chr>      #> 1    24    29 0.000796 101742296 105203321  #> 2    18    29 0.000348 101742296 1111111143 #> 3    17    29 0.00233  101742296 15559333   #> # … with 302 more rows #>  #> $`1990-2004` #> # A tbl_graph: 39 nodes and 431 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 39 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 214927     BALL-L   1991 BALL-L-… THE G… JOURNA… Stag… 1990-2… 2       cl_4    #> 2 1111111176 TAYLOR…  1992 TAYLOR-… THE G… RESERV… Stag… 1990-2… 2       cl_4    #> 3 19627977   PARKIN…  1993 PARKIN-… INFLA… PRICE … Stag… 1990-2… 2       cl_4    #> 4 2207578    BALL-L   1995 BALL-L-… RELAT… THE QU… Stag… 1990-2… 2       cl_4    #> 5 10729971   BALL-L   1995 BALL-L-… TIME-… JOURNA… Stag… 1990-2… 2       cl_4    #> 6 24669774   ROTEMB…  1996 ROTEMBE… IMPER… JOURNA… Stag… 1990-2… 3       cl_40   #> # … with 33 more rows #> # #> # Edge Data: 431 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    29    38 0.00101  101742279 101742296 #> 2    37    38 0.000143 101742279 101777013 #> 3    38    39 0.000225 101742279 106566092 #> # … with 428 more rows #>  #> $`1991-2005` #> # A tbl_graph: 47 nodes and 663 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 47 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 214927     BALL-L   1991 BALL-L-… THE G… JOURNA… Stag… 1991-2… 2       cl_4    #> 2 1111111176 TAYLOR…  1992 TAYLOR-… THE G… RESERV… Stag… 1991-2… 2       cl_4    #> 3 19627977   PARKIN…  1993 PARKIN-… INFLA… PRICE … Stag… 1991-2… 2       cl_4    #> 4 2207578    BALL-L   1995 BALL-L-… RELAT… THE QU… Stag… 1991-2… 2       cl_4    #> 5 10729971   BALL-L   1995 BALL-L-… TIME-… JOURNA… Stag… 1991-2… 2       cl_4    #> 6 24669774   ROTEMB…  1996 ROTEMBE… IMPER… JOURNA… Stag… 1991-2… 3       cl_40   #> # … with 41 more rows #> # #> # Edge Data: 663 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    29    38 0.000901 101742279 101742296 #> 2    37    38 0.000125 101742279 101777013 #> 3    38    41 0.000122 101742279 106371053 #> # … with 660 more rows #>  #> $`1992-2006` #> # A tbl_graph: 50 nodes and 768 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 50 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 1111111176 TAYLOR…  1992 TAYLOR-… THE G… RESERV… Stag… 1992-2… 2       cl_4    #> 2 19627977   PARKIN…  1993 PARKIN-… INFLA… PRICE … Stag… 1992-2… 2       cl_4    #> 3 2207578    BALL-L   1995 BALL-L-… RELAT… THE QU… Stag… 1992-2… 2       cl_4    #> 4 10729971   BALL-L   1995 BALL-L-… TIME-… JOURNA… Stag… 1992-2… 2       cl_4    #> 5 24669774   ROTEMB…  1996 ROTEMBE… IMPER… JOURNA… Stag… 1992-2… 3       cl_40   #> 6 43590636   BERNAN…  1997 BERNANK… SYSTE… BROOKI… Stag… 1992-2… 3       cl_40   #> # … with 44 more rows #> # #> # Edge Data: 768 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    28    37 0.000882 101742279 101742296 #> 2    36    37 0.000123 101742279 101777013 #> 3    37    40 0.000115 101742279 106371053 #> # … with 765 more rows #>  #> $`1993-2007` #> # A tbl_graph: 55 nodes and 967 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 55 × 10 (active) #>   ID_Art   Author       Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>       <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 19627977 PARKIN-M     1993 PARKIN… INFL… PRICE … Stag… 1993-2… 3       cl_4    #> 2 2207578  BALL-L       1995 BALL-L… RELA… THE QU… Stag… 1993-2… 3       cl_4    #> 3 10729971 BALL-L       1995 BALL-L… TIME… JOURNA… Stag… 1993-2… 3       cl_4    #> 4 24669774 ROTEMBERG-J  1996 ROTEMB… IMPE… JOURNA… Stag… 1993-2… 2       cl_40   #> 5 43590636 BERNANKE-B   1997 BERNAN… SYST… BROOKI… Stag… 1993-2… 2       cl_40   #> 6 8456979  DELONG-B     1997 DELONG… AMER… REDUCI… Stag… 1993-2… 3       cl_4    #> # … with 49 more rows #> # #> # Edge Data: 967 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    27    36 0.000857 101742279 101742296 #> 2    35    36 0.000119 101742279 101777013 #> 3    36    39 0.000110 101742279 106371053 #> # … with 964 more rows #>  #> $`1994-2008` #> # A tbl_graph: 55 nodes and 985 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 55 × 10 (active) #>   ID_Art   Author       Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>       <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 2207578  BALL-L       1995 BALL-L… RELA… THE QU… Stag… 1994-2… 3       cl_4    #> 2 10729971 BALL-L       1995 BALL-L… TIME… JOURNA… Stag… 1994-2… 3       cl_4    #> 3 24669774 ROTEMBERG-J  1996 ROTEMB… IMPE… JOURNA… Stag… 1994-2… 2       cl_40   #> 4 43590636 BERNANKE-B   1997 BERNAN… SYST… BROOKI… Stag… 1994-2… 2       cl_40   #> 5 8456979  DELONG-B     1997 DELONG… AMER… REDUCI… Stag… 1994-2… 3       cl_4    #> 6 27334211 TAYLOR-J     1997 TAYLOR… AMER… REDUCI… Stag… 1994-2… 3       cl_4    #> # … with 49 more rows #> # #> # Edge Data: 985 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    26    35 0.000848 101742279 101742296 #> 2    34    35 0.000116 101742279 101777013 #> 3    35    38 0.000110 101742279 106371053 #> # … with 982 more rows #>  #> $`1995-2009` #> # A tbl_graph: 60 nodes and 1151 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 60 × 10 (active) #>   ID_Art   Author       Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>       <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 2207578  BALL-L       1995 BALL-L… RELA… THE QU… Stag… 1995-2… 3       cl_4    #> 2 10729971 BALL-L       1995 BALL-L… TIME… JOURNA… Stag… 1995-2… 3       cl_4    #> 3 24669774 ROTEMBERG-J  1996 ROTEMB… IMPE… JOURNA… Stag… 1995-2… 2       cl_40   #> 4 43590636 BERNANKE-B   1997 BERNAN… SYST… BROOKI… Stag… 1995-2… 2       cl_40   #> 5 8456979  DELONG-B     1997 DELONG… AMER… REDUCI… Stag… 1995-2… 3       cl_4    #> 6 27334211 TAYLOR-J     1997 TAYLOR… AMER… REDUCI… Stag… 1995-2… 3       cl_4    #> # … with 54 more rows #> # #> # Edge Data: 1,151 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    26    35 0.000838 101742279 101742296 #> 2    34    35 0.000115 101742279 101777013 #> 3    35    38 0.000108 101742279 106371053 #> # … with 1,148 more rows #>  #> $`1996-2010` #> # A tbl_graph: 60 nodes and 1163 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 60 × 10 (active) #>   ID_Art   Author       Year Author… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>       <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 24669774 ROTEMBERG-J  1996 ROTEMB… IMPE… JOURNA… Stag… 1996-2… 2       cl_40   #> 2 43590636 BERNANKE-B   1997 BERNAN… SYST… BROOKI… Stag… 1996-2… 2       cl_40   #> 3 8456979  DELONG-B     1997 DELONG… AMER… REDUCI… Stag… 1996-2… 3       cl_4    #> 4 27334211 TAYLOR-J     1997 TAYLOR… AMER… REDUCI… Stag… 1996-2… 3       cl_4    #> 5 60300900 CHARI-V      1998 CHARI-… EXPE… JOURNA… Stag… 1996-2… 3       cl_4    #> 6 94940407 HETZEL-R     1998 HETZEL… ARTH… FEDERA… Stag… 1996-2… 1       cl_47   #> # … with 54 more rows #> # #> # Edge Data: 1,163 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    24    33 0.000838 101742279 101742296 #> 2    32    33 0.000115 101742279 101777013 #> 3    33    36 0.000108 101742279 106371053 #> # … with 1,160 more rows #>  #> $`1997-2011` #> # A tbl_graph: 60 nodes and 1183 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 60 × 10 (active) #>   ID_Art   Author      Year Author_… Title Journal Type  time_w… cluste… intert… #>   <chr>    <chr>      <int> <chr>    <chr> <chr>   <chr> <chr>   <chr>   <chr>   #> 1 43590636 BERNANKE-B  1997 BERNANK… SYST… \"BROOK… Stag… 1997-2… 2       cl_40   #> 2 8456979  DELONG-B    1997 DELONG-… AMER… \"REDUC… Stag… 1997-2… 3       cl_4    #> 3 27334211 TAYLOR-J    1997 TAYLOR-… AMER… \"REDUC… Stag… 1997-2… 3       cl_4    #> 4 60300900 CHARI-V     1998 CHARI-V… EXPE… \"JOURN… Stag… 1997-2… 3       cl_4    #> 5 94940407 HETZEL-R    1998 HETZEL-… ARTH… \"FEDER… Stag… 1997-2… 1       cl_47   #> 6 17355017 MAYER-T     1998 MAYER-T… MONE… \"\"      Stag… 1997-2… 3       cl_4    #> # … with 54 more rows #> # #> # Edge Data: 1,183 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    23    32 0.000836 101742279 101742296 #> 2    31    32 0.000114 101742279 101777013 #> 3    32    35 0.000107 101742279 106371053 #> # … with 1,180 more rows #>  #> $`1998-2012` #> # A tbl_graph: 59 nodes and 1199 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 59 × 10 (active) #>   ID_Art   Author   Year Author_… Title   Journal  Type  time_w… cluste… intert… #>   <chr>    <chr>   <int> <chr>    <chr>   <chr>    <chr> <chr>   <chr>   <chr>   #> 1 60300900 CHARI-V  1998 CHARI-V… EXPECT… \"JOURNA… Stag… 1998-2… 1       cl_81   #> 2 94940407 HETZEL…  1998 HETZEL-… ARTHUR… \"FEDERA… Stag… 1998-2… 3       cl_47   #> 3 17355017 MAYER-T  1998 MAYER-T… MONETA… \"\"       Stag… 1998-2… 1       cl_81   #> 4 73951174 IRELAN…  1999 IRELAND… DOES T… \"JOURNA… Stag… 1998-2… 1       cl_81   #> 5 24247525 TAYLOR…  1999 TAYLOR-… A HIST… \"MONETA… Stag… 1998-2… 2       cl_40   #> 6 95020640 CHRIST…  2000 CHRISTI… THE EX… \"\"       Stag… 1998-2… 3       cl_47   #> # … with 53 more rows #> # #> # Edge Data: 1,199 × 5 #>    from    to   weight Source    Target    #>   <int> <int>    <dbl> <chr>     <chr>     #> 1    20    29 0.000835 101742279 101742296 #> 2    28    29 0.000112 101742279 101777013 #> 3    29    32 0.000105 101742279 106371053 #> # … with 1,196 more rows #>  #> $`1999-2013` #> # A tbl_graph: 64 nodes and 1515 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 64 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal Type  time_w… cluste… intert… #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <chr>   #> 1 73951174   IRELAN…  1999 IRELAND… DOES … \"JOURN… Stag… 1999-2… 1       cl_81   #> 2 24247525   TAYLOR…  1999 TAYLOR-… A HIS… \"MONET… Stag… 1999-2… 2       cl_40   #> 3 95020640   CHRIST…  2000 CHRISTI… THE E… \"\"      Stag… 1999-2… 3       cl_47   #> 4 76064614   CLARID…  2000 CLARIDA… MONET… \"THE Q… Stag… 1999-2… 2       cl_40   #> 5 15559333   LANSIN…  2000 LANSING… EXPLO… \"RESEA… Stag… 1999-2… 1       cl_81   #> 6 1111111143 LANSIN…  2000 LANSING… LEARN… \"\"      Stag… 1999-2… 1       cl_81   #> # … with 58 more rows #> # #> # Edge Data: 1,515 × 5 #>    from    to    weight Source    Target    #>   <int> <int>     <dbl> <chr>     <chr>     #> 1    17    26 0.000785  101742279 101742296 #> 2    25    26 0.000105  101742279 101777013 #> 3    26    29 0.0000994 101742279 106371053 #> # … with 1,512 more rows #>"},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Coordinates of Nodes — layout_networks","title":"Calculate the Coordinates of Nodes — layout_networks","text":"function implements different layout algorithms ggraph graphlayouts. also implements dynamic process computation coordinates list tibble graphs, order coordinates consistent graphs.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Coordinates of Nodes — layout_networks","text":"","code":"layout_networks(   graphs,   node_id,   layout,   compute_dynamic_coordinates = FALSE,   save_coordinates = FALSE,   ... )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Coordinates of Nodes — layout_networks","text":"graphs tibble graph tidygraph, list tibble graphs data frame. node_id column unique identifier node. layout type layout create. strings accepted algorithm argument can also supplied directly layout. See ggraph::ggraph() details layouts. compute_dynamic_coordinates list tibble graphs nodes multiple graphs, may want node several graphs relatively similar coordinates. Set compute_dynamic_coordinates TRUE take account coordinates nodes n-1 tibble graph, computation coordinates n tibble graph. save_coordinates running function object, already existing columns x y erased new values computed. Set save_coordinates TRUE save x y values columns name depending layout method used. ... Additional arguments layout compatible function. See ggraph::graph(), ggraph::layout_tbl_graph_igraph() graphlayouts::graphslayouts() information.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Coordinates of Nodes — layout_networks","text":"tibble graph list tibble graphs column x y, also additional column x_{layout} y_{layout} set save_coordinates TRUE.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Coordinates of Nodes — layout_networks","text":"function allows use different layouts implemented ggraph graphlayouts. However, layout graphlayouts working function. Also, layouts take input pre-determined coordinates, meaning compute_dynamic_coordinates argument work layout. Please check layout used allows parameter called coord.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/layout_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Coordinates of Nodes — layout_networks","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE) #> ℹ The method use for co-occurence is the coupling_similarity method. #> ℹ The edge threshold is: 1. #> ℹ We remove the nodes that are alone with no edge.  #>  #> ── Creation of the network for the 1975-1994 window. ─────────────────────────── #>  #> ── Creation of the network for the 1976-1995 window. ─────────────────────────── #>  #> ── Creation of the network for the 1977-1996 window. ─────────────────────────── #>  #> ── Creation of the network for the 1978-1997 window. ─────────────────────────── #>  #> ── Creation of the network for the 1979-1998 window. ─────────────────────────── #>  #> ── Creation of the network for the 1980-1999 window. ─────────────────────────── #>  #> ── Creation of the network for the 1981-2000 window. ─────────────────────────── #>  #> ── Creation of the network for the 1982-2001 window. ─────────────────────────── #>  #> ── Creation of the network for the 1983-2002 window. ─────────────────────────── #>  #> ── Creation of the network for the 1984-2003 window. ─────────────────────────── #>  #> ── Creation of the network for the 1985-2004 window. ─────────────────────────── #>  #> ── Creation of the network for the 1986-2005 window. ─────────────────────────── #>  #> ── Creation of the network for the 1987-2006 window. ─────────────────────────── #>  #> ── Creation of the network for the 1988-2007 window. ─────────────────────────── #>  #> ── Creation of the network for the 1989-2008 window. ─────────────────────────── #>  #> ── Creation of the network for the 1990-2009 window. ─────────────────────────── #>  #> ── Creation of the network for the 1991-2010 window. ─────────────────────────── #>  #> ── Creation of the network for the 1992-2011 window. ─────────────────────────── #>  #> ── Creation of the network for the 1993-2012 window. ─────────────────────────── #>  #> ── Creation of the network for the 1994-2013 window. ───────────────────────────  temporal_networks <- layout_networks(temporal_networks, node_id = \"ID_Art\", layout = \"fr\", compute_dynamic_coordinates = TRUE)  temporal_networks [[1]] #> # A tbl_graph: 74 nodes and 446 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 74 × 10 (active) #>   ID_Art     Author   Year Author_… Title  Journal  Type  time_w…      x       y #>   <chr>      <chr>   <int> <chr>    <chr>  <chr>    <chr> <chr>    <dbl>   <dbl> #> 1 16182155   GORDON…  1975 GORDON-… ALTER… \"BROOKI… Stag… 1975-1… -10.2  -13.8   #> 2 26283591   GORDON…  1975 GORDON-… THE I… \"BROOKI… Stag… 1975-1…   7.77 -11.8   #> 3 16182201   OKUN-A   1975 OKUN-A-… INFLA… \"BROOKI… Stag… 1975-1…  28.0    1.02  #> 4 47749045   BRONFE…  1976 BRONFEN… ELEME… \"ZEITSC… Stag… 1975-1…  56.7    0.603 #> 5 1111111141 KARNOS…  1976 KARNOSK… THE L… \"REVIEW\" Stag… 1975-1…  18.4  -11.8   #> 6 1021902    FRIEDM…  1977 FRIEDMA… NOBEL… \"THE JO… Stag… 1975-1…   6.09  11.7   #> # … with 68 more rows #> # #> # Edge Data: 446 × 5 #>    from    to   weight Source  Target     #>   <int> <int>    <dbl> <chr>   <chr>      #> 1     6    11 0.00158  1021902 1111111122 #> 2     6    45 0.000173 1021902 1111111128 #> 3     6    66 0.000430 1021902 1111111134 #> # … with 443 more rows"},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Leiden Communities to graph — leiden_workflow","title":"Add Leiden Communities to graph — leiden_workflow","text":"function superseded general networkflow::add_clusters(). function takes input tidygraph graph runs Leiden detection community algorithm (Traag et al. 2019)  creates partition. Leiden_workflow functhion uses find_partition() leidenAlg package. function associates node corresponding community number. also creates community attribute edges: edge associated corresponding community number, two nodes connected edge belong community. nodes different community, edge takes attribute total number communities plus 1.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Leiden Communities to graph — leiden_workflow","text":"","code":"leiden_workflow(graph, res_1 = 1, res_2 = NULL, res_3 = NULL, niter = 1000)"},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Leiden Communities to graph — leiden_workflow","text":"graph tidygraph object \"weight\" column edges. res_1 first resolution used running Leiden algorithm. 1 default. res_2 second resolution used running Leiden algorithm second time. adds second community attribute nodes edges. default, res_2 null function just run Leiden algorithm (resolution equals res_1). res_3 third resolution used running Leiden algorithm third time. niter Number iterations run Leiden algorithm, order optimise resulting partition. default, niter equals 500 warrants quasi-optimal partitionning. Decrease n_iterations exploratory work, order decrease computation time.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Leiden Communities to graph — leiden_workflow","text":"tidygraph graph input, new (three) community number attribute(s) node edge.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Leiden Communities to graph — leiden_workflow","text":"function run 1, 2 3 different resolution values Leiden algorithm. allows user compare different communities partitions. low resolution means fewer communities. instance, second resolution smaller first one, can observe decreasing resolution led communities disappear merged communities. Sankey diagrams enable interesting analysis different partitions. function also automatically calculates percentage total nodes gathered community, column Size_com. calculation done Com_ID, resolution equals 1. make plotting easier later, zero put one-digit community number (community 5 becomes 05). community attribute nodes edges first resolution called Com_ID. second third resolution, called respectively Com_ID_2 Com_ID_3. Attributing community number edges enable give edges color nodes connecting, two nodes color, different color node, nodes belong different community.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/leiden_workflow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Leiden Communities to graph — leiden_workflow","text":"Traag VA, Waltman L, family=Eck gJpu (2019). “Louvain Leiden: Guaranteeing Well-Connected Communities.” Scientific reports, 9(1), 1--12.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/merge_dynamic_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","title":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","text":"function creates new column \"intertemporal_name\" network list temporal networks identify similar clusters across time. function gives name two clusters two succesive temporal networks match conditions defined user: threshold_similarity, cluster_colum similarity_type.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/merge_dynamic_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","text":"","code":"merge_dynamic_clusters(   list_graph = NA,   cluster_id = NA,   node_id = NA,   threshold_similarity = 0.5001,   similarity_type = c(\"complete, partial\") )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/merge_dynamic_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","text":"list_graph list tibble graphs ((tidygraph)) list expected ordered sequential order oldest recent network. cluster_id column identifier cluster. used add_clusters(), form cluster_{clustering_method}. node_id column unique identifier node. threshold_similarity threshold_similarity variable defines sensitive function giving name two clusters. higher threshold lead communities. example, two temporal networks two communities . Communities B older network, communities ' B' recent network. threshold 0.51 \"complete\" similarity_type means community ' given name 51% nodes ' recent network originate older network, 51% node older network becomes ' recent network. similarity_type Choose similarity type compare threshold : \"complete\" similarity compute share nodes going older community recent community nodes networks \"partial\" similarity compute share nodes going older community recent community nodes exists networks Complete similarity particularly suited number nodes networks relatively stable time threshold capture share nodes moving clusters. Partial similarity can particularly useful number nodes networks increases rapidly. interpretation threshold captures share nodes existing networks moving clusters. example, complete similarity threshold 0.51, (1) nodes community network t-1 go community ' network t+1, (2) nodes community ' present network t-1 originate community , (3) number nodes ' twice new nodes exists t-1, ' never meet threshold requirement named despite strong similarity two clusters. Conceptually, might desired behavior function one might considered ' different considered cluster composition changed new nodes. case complete similarity right choice. However, one consider ' similar nodes exists networks identified part community, partial threshold similarity desirable.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/merge_dynamic_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","text":"function returns list networks used input list_graph new column dynamic_{cluster_id} (.e, name new column depends column served input). column result inter-graphs grouping original clusters cluster_id. dynamic clusters also merged different cluster_id columns edges data.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/merge_dynamic_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Similar Clusters across Multiple Temporal Networks — merge_dynamic_clusters","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 10, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE) #> ℹ The method use for co-occurence is the coupling_similarity method. #> ℹ The edge threshold is: 1. #> ℹ We remove the nodes that are alone with no edge.  #>  #> ── Creation of the network for the 1975-1984 window. ─────────────────────────── #>  #> ── Creation of the network for the 1976-1985 window. ─────────────────────────── #>  #> ── Creation of the network for the 1977-1986 window. ─────────────────────────── #>  #> ── Creation of the network for the 1978-1987 window. ─────────────────────────── #>  #> ── Creation of the network for the 1979-1988 window. ─────────────────────────── #>  #> ── Creation of the network for the 1980-1989 window. ─────────────────────────── #>  #> ── Creation of the network for the 1981-1990 window. ─────────────────────────── #>  #> ── Creation of the network for the 1982-1991 window. ─────────────────────────── #>  #> ── Creation of the network for the 1983-1992 window. ─────────────────────────── #>  #> ── Creation of the network for the 1984-1993 window. ─────────────────────────── #>  #> ── Creation of the network for the 1985-1994 window. ─────────────────────────── #>  #> ── Creation of the network for the 1986-1995 window. ─────────────────────────── #>  #> ── Creation of the network for the 1987-1996 window. ─────────────────────────── #>  #> ── Creation of the network for the 1988-1997 window. ─────────────────────────── #>  #> ── Creation of the network for the 1989-1998 window. ─────────────────────────── #>  #> ── Creation of the network for the 1990-1999 window. ─────────────────────────── #>  #> ── Creation of the network for the 1991-2000 window. ─────────────────────────── #>  #> ── Creation of the network for the 1992-2001 window. ─────────────────────────── #>  #> ── Creation of the network for the 1993-2002 window. ─────────────────────────── #>  #> ── Creation of the network for the 1994-2003 window. ─────────────────────────── #>  #> ── Creation of the network for the 1995-2004 window. ─────────────────────────── #>  #> ── Creation of the network for the 1996-2005 window. ─────────────────────────── #>  #> ── Creation of the network for the 1997-2006 window. ─────────────────────────── #>  #> ── Creation of the network for the 1998-2007 window. ─────────────────────────── #>  #> ── Creation of the network for the 1999-2008 window. ─────────────────────────── #>  #> ── Creation of the network for the 2000-2009 window. ─────────────────────────── #>  #> ── Creation of the network for the 2001-2010 window. ─────────────────────────── #>  #> ── Creation of the network for the 2002-2011 window. ─────────────────────────── #>  #> ── Creation of the network for the 2003-2012 window. ─────────────────────────── #>  #> ── Creation of the network for the 2004-2013 window. ───────────────────────────  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\") #>  #> ── Cluster detection for the \"1975-1984\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"39.1%\" of the network. #>  #> ── Cluster detection for the \"1976-1985\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"24.6%\" of the network. #>  #> ── Cluster detection for the \"1977-1986\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"26.2%\" of the network. #>  #> ── Cluster detection for the \"1978-1987\" period ──────────────────────────────── #> ℹ The leiden method detected 6 clusters. The biggest cluster represents \"28.6%\" of the network. #>  #> ── Cluster detection for the \"1979-1988\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"35.4%\" of the network. #>  #> ── Cluster detection for the \"1980-1989\" period ──────────────────────────────── #> ℹ The leiden method detected 5 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1981-1990\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"37%\" of the network. #>  #> ── Cluster detection for the \"1982-1991\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.1%\" of the network. #>  #> ── Cluster detection for the \"1983-1992\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"42.9%\" of the network. #>  #> ── Cluster detection for the \"1984-1993\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1985-1994\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"57.1%\" of the network. #>  #> ── Cluster detection for the \"1986-1995\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"57.1%\" of the network. #>  #> ── Cluster detection for the \"1987-1996\" period ──────────────────────────────── #> ℹ The leiden method detected 2 clusters. The biggest cluster represents \"62.5%\" of the network. #>  #> ── Cluster detection for the \"1988-1997\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"36.4%\" of the network. #>  #> ── Cluster detection for the \"1989-1998\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"45.5%\" of the network. #>  #> ── Cluster detection for the \"1990-1999\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"46.2%\" of the network. #>  #> ── Cluster detection for the \"1991-2000\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.9%\" of the network. #>  #> ── Cluster detection for the \"1992-2001\" period ──────────────────────────────── #> ℹ The leiden method detected 4 clusters. The biggest cluster represents \"35%\" of the network. #>  #> ── Cluster detection for the \"1993-2002\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40.7%\" of the network. #>  #> ── Cluster detection for the \"1994-2003\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.7%\" of the network. #>  #> ── Cluster detection for the \"1995-2004\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"38.9%\" of the network. #>  #> ── Cluster detection for the \"1996-2005\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40.5%\" of the network. #>  #> ── Cluster detection for the \"1997-2006\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"40%\" of the network. #>  #> ── Cluster detection for the \"1998-2007\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"39.6%\" of the network. #>  #> ── Cluster detection for the \"1999-2008\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"39.1%\" of the network. #>  #> ── Cluster detection for the \"2000-2009\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"49%\" of the network. #>  #> ── Cluster detection for the \"2001-2010\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"45.7%\" of the network. #>  #> ── Cluster detection for the \"2002-2011\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"50%\" of the network. #>  #> ── Cluster detection for the \"2003-2012\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"55.3%\" of the network. #>  #> ── Cluster detection for the \"2004-2013\" period ──────────────────────────────── #> ℹ The leiden method detected 3 clusters. The biggest cluster represents \"54.8%\" of the network.  temporal_networks <- merge_dynamic_clusters(temporal_networks, cluster_id = \"cluster_leiden\", node_id = \"ID_Art\", threshold_similarity = 0.51, similarity_type = \"partial\")  temporal_networks[[1]] #> # A tbl_graph: 64 nodes and 375 edges #> # #> # An undirected simple graph with 1 component #> # #> # Edge Data: 375 × 11 (active) #>    from    to  weight Source Target cluste… cluste… cluste… dynami… dynami… #>   <int> <int>   <dbl> <chr>  <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   #> 1     6    11 1.60e-3 10219… 11111… 02      02      02      cl_2    cl_2    #> 2     6    45 1.83e-4 10219… 11111… 02      03      00      cl_2    cl_3    #> 3     6    35 7.51e-4 10219… 11111… 02      02      02      cl_2    cl_2    #> 4     6    20 1.28e-4 10219… 11111… 02      02      02      cl_2    cl_2    #> 5     6    42 6.24e-4 10219… 11111… 02      02      02      cl_2    cl_2    #> 6     6    21 3.65e-4 10219… 11111… 02      02      02      cl_2    cl_2    #> # … with 369 more rows, and 1 more variable: dynamic_cluster_leiden <chr> #> # #> # Node Data: 64 × 11 #>   ID_Art Author  Year Author… Title Journal Type  time_w… cluste… size_c… #>   <chr>  <chr>  <int> <chr>   <chr> <chr>   <chr> <chr>   <chr>     <dbl> #> 1 16182… GORDO…  1975 GORDON… ALTE… BROOKI… Stag… 1975-1… 01        0.219 #> 2 26283… GORDO…  1975 GORDON… THE … BROOKI… Stag… 1975-1… 01        0.219 #> 3 16182… OKUN-A  1975 OKUN-A… INFL… BROOKI… Stag… 1975-1… 02        0.266 #> # … with 61 more rows, and 1 more variable: dynamic_cluster_leiden <chr>"},{"path":"https://agoutsmedt.github.io/networkflow/reference/minimize_crossing_alluvial.html","id":null,"dir":"Reference","previous_headings":"","what":"Order the rectangles of the alluvial in a way that minimize crossing of flow — minimize_crossing_alluvial","title":"Order the rectangles of the alluvial in a way that minimize crossing of flow — minimize_crossing_alluvial","text":"function transform node_id factor ordered newly created column named \"minimize_crossing_order\".","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/minimize_crossing_alluvial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order the rectangles of the alluvial in a way that minimize crossing of flow — minimize_crossing_alluvial","text":"","code":"minimize_crossing_alluvial(   alluv_dt,   intertemporal_cluster_column = NULL,   node_id = NULL,   window_column = \"window\" )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/minimize_crossing_alluvial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order the rectangles of the alluvial in a way that minimize crossing of flow — minimize_crossing_alluvial","text":"alluv_dt Data.frame alluvial created using networkflow::networks_to_alluv function intertemporal_cluster_column column identifier inter-temporal cluster. used add_clusters() merge_dynamic_clusters(), form dynamic_cluster_{clustering_method}. node_id column unique identifier node. alluvium alluvial. window_column column time windows. @examples","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically Attributing Names to Clusters — name_clusters","title":"Automatically Attributing Names to Clusters — name_clusters","text":"function gives name networks clusters. also gives edges name cluster. clusters named according column chosen user (instance, case nodes articles, name may author date article).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically Attributing Names to Clusters — name_clusters","text":"","code":"name_clusters(   graphs,   method = c(\"tidygraph_functions\", \"given_column\", \"tf-idf\"),   name_merged_clusters = FALSE,   cluster_id,   label_columns,   label_name = \"cluster_label\",   tidygraph_function = NULL,   order_by = NULL,   text_columns = NULL,   nb_terms_label = 3,   ... )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically Attributing Names to Clusters — name_clusters","text":"graphs tibble graph (tidygraph) list tibble graphs. method method finding names, among tidygraph_functions, given_column, tf-idf (see details). tf-idf method chosen default. name_merged_clusters Set TRUE clusters established tibble graphs thus unique. Typically, clusters running merge_dynamic_clusters(). cluster_id column want name. Generally, column identifier clusters, whether simple cluster detected add_clusters() merged clusters detected merge_dynamic_clusters(). label_columns column want used name clusters. nodes article, can choose, instance, columns author article date publication. label_name name column cluster names, created function. \"cluster_label\" default. tidygraph_function tidygraph_functions method (see details), centrality measure chosen among measures implemented tidygraph  (see tidygraph::centrality()). order_by given_column method, column within nodes list tibble graph(s) want used classify nodes choose names. must numeric column. instance, can use node_size column network set compute_size TRUE build_network() build_dynamic_networks(). text_columns tf-idf method, columns text want analyze. give multiple columns, united extract terms. parameter extract_tfidf(). nb_terms_label tf-idf method, number terms want used serve name cluster. Terms separated comma. parameter extract_tfidf(). ... Additional arguments extract_tfidf, outside referred well grouping_across_list relevant .","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically Attributing Names to Clusters — name_clusters","text":"tibble graph list tibble graphs new column names clusters, nodes edges. choose tidygraph_functions method, function also returns nodes column centrality measure computed.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically Attributing Names to Clusters — name_clusters","text":"node used naming community chosen depending 3 methods: tidygraph_functions method: name cluster comes node, within cluster, highest centrality measure. user can choose different centrality measure implemented  tidygraph (see tidygraph::centrality() details). given_column method: user gives column tibble graph(s), numeric values, used classify nodes choose name cluster. label_columns node highest numerical value cluster used name cluster. tf-idf method: clusters name according terms highest tf-idf value cluster. user furnishes one several columns text, function extracts term calculate tf-idf value term, depending clusters. method uses extract_tfidf(). Please note , name_merged_clusters set FALSE, TF-IDF computed tibble graph tibble graph. means likely clusters different tibble graphs share name.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/name_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically Attributing Names to Clusters — name_clusters","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE, verbose = FALSE)  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\", verbose = FALSE)  # You can name the clusters in each tibble graphs:  temporal_networks_with_names <- name_clusters(graphs = temporal_networks, method = \"tidygraph_functions\", name_merged_clusters = FALSE, cluster_id = \"cluster_leiden\", label_columns = c(\"Author\", \"Year\"), tidygraph_function = tidygraph::centrality_pagerank()) #> Error in mutate(d_tmp, ...): ℹ In argument: `cluster_label = ifelse(is.na(eval(ensym(label_name))), #>   \"no_name\", eval(ensym(label_name)))`. #> Caused by error in `ensym()`: #> ! could not find function \"ensym\"  temporal_networks_with_names[[1]] #> Error in eval(expr, envir, enclos): object 'temporal_networks_with_names' not found  # Or you can name the dynamic clusters:  temporal_networks <- merge_dynamic_clusters(temporal_networks, cluster_id = \"cluster_leiden\", node_id = \"ID_Art\", threshold_similarity = 0.51, similarity_type = \"partial\")  temporal_networks_with_names <- name_clusters(graphs = temporal_networks, method = \"tf-idf\", name_merged_clusters = TRUE, cluster_id = \"dynamic_cluster_leiden\", text_columns = \"Title\", nb_terms_label = 5, clean_word_method = \"lemmatise\") #> Warning: Invalid .internal.selfref detected and fixed by taking a (shallow) copy of the data.table so that := can add this new column by reference. At an earlier point, this data.table has been copied by R (or was created manually using structure() or similar). Avoid names<- and attr<- which in R currently (and oddly) may copy the whole data.table. Use set* syntax instead to avoid copying: ?set, ?setnames and ?setattr. If this message doesn't help, please report your use case to the data.table issue tracker so the root cause can be fixed or this message improved. #> Error in mutate(d_tmp, ...): ℹ In argument: `cluster_label = ifelse(is.na(eval(ensym(label_name))), #>   \"no_name\", eval(ensym(label_name)))`. #> Caused by error in `ensym()`: #> ! could not find function \"ensym\"  temporal_networks_with_names[[1]] #> Error in eval(expr, envir, enclos): object 'temporal_networks_with_names' not found"},{"path":"https://agoutsmedt.github.io/networkflow/reference/networkflow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"networkflow: Functions For A Workflow To Manipulate Networks — networkflow-package","title":"networkflow: Functions For A Workflow To Manipulate Networks — networkflow-package","text":"package proposes series function make easier quicker work networks. mainly targets working bibliometric networks (see [biblionetwork](https://github.com/agoutsmedt/biblionetwork) package creating networks). package heavily relies [igraph](https://igraph.org/r/) [tidygraph](https://tidygraph.data-imaginist.com/index.html), aims producing ready-made networks projecting using [ggraph](https://ggraph.data-imaginist.com/). package invent nothing new, properly speaking, allows users follow quickly easily main steps network manipulation, creating graph projecting . inspired done [GEPHI](https://gephi.org/): package allows use Leiden community detection algorithm, well Force Atlas 2 layout, unavailable igraph (tidygraph).","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/networkflow/reference/networkflow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"networkflow: Functions For A Workflow To Manipulate Networks — networkflow-package","text":"Maintainer: Aurélien Goutsmedt agoutsmedt@gmail.com (ORCID) Authors: Alexandre Truc alexandre.truc77@gmail.com (ORCID)","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/networks_to_alluv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame suitable for alluvial graph projection — networks_to_alluv","title":"Create a data.frame suitable for alluvial graph projection — networks_to_alluv","text":"function creates data.frame can easily plotted ggalluvial list networks.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/networks_to_alluv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame suitable for alluvial graph projection — networks_to_alluv","text":"","code":"networks_to_alluv(   list_graph = NA,   intertemporal_cluster_column = \"intertemporal_name\",   node_id = NA,   summary_cl_stats = TRUE,   keep_color = TRUE,   color_column = \"color\",   keep_cluster_label = TRUE,   cluster_label_column = \"cluster_label\" )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/networks_to_alluv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame suitable for alluvial graph projection — networks_to_alluv","text":"list_graph list networks intertemporal_cluster_column column identifier inter-temporal cluster. used add_clusters() merge_dynamic_clusters(), form dynamic_cluster_{clustering_method}. node_id column unique identifier node. summary_cl_stats set TRUE, data.frame contain list variable summarize cluster statistics alluvial. variables can particularly useful filter smaller communities plotting according different variables: share_cluster_alluv percentage share given cluster across time windows; share_cluster_window percentage share given cluster given time window; share_cluster_max highest value share_cluster_window given cluster across individual time windows; length_cluster number time windows cluster exists. keep_color Set TRUE (default) want keep column color associated different categories intertemporal_cluster_column. column exists list tibble graphs use color_networks(). color_column name column colors categories intertemporal_cluster_column. default, \"color\", column name resulting use color_networks(). keep_cluster_label Set TRUE want keep column name/label associated different categories intertemporal_cluster_column. column exists list tibble graphs use name_clusters(). cluster_label_column name column name/label associated categories intertemporal_cluster_column. default, \"cluster_label\", column name resulting use name_clusters().","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/networks_to_alluv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame suitable for alluvial graph projection — networks_to_alluv","text":"","code":"library(networkflow)  nodes <- Nodes_stagflation |> dplyr::rename(ID_Art = ItemID_Ref) |> dplyr::filter(Type == \"Stagflation\")  references <- Ref_stagflation |> dplyr::rename(ID_Art = Citing_ItemID_Ref)  temporal_networks <- build_dynamic_networks(nodes = nodes, directed_edges = references, source_id = \"ID_Art\", target_id = \"ItemID_Ref\", time_variable = \"Year\", cooccurrence_method = \"coupling_similarity\", time_window = 20, edges_threshold = 1, overlapping_window = TRUE, filter_components = TRUE, verbose = FALSE)  temporal_networks <- add_clusters(temporal_networks, objective_function = \"modularity\", clustering_method = \"leiden\", verbose = FALSE)  temporal_networks <- merge_dynamic_clusters(temporal_networks, cluster_id = \"cluster_leiden\", node_id = \"ID_Art\", threshold_similarity = 0.51, similarity_type = \"partial\")  temporal_networks <- name_clusters(graphs = temporal_networks, method = \"tf-idf\", name_merged_clusters = TRUE, cluster_id = \"dynamic_cluster_leiden\", text_columns = \"Title\", nb_terms_label = 5, clean_word_method = \"lemmatise\") #> Warning: Invalid .internal.selfref detected and fixed by taking a (shallow) copy of the data.table so that := can add this new column by reference. At an earlier point, this data.table has been copied by R (or was created manually using structure() or similar). Avoid names<- and attr<- which in R currently (and oddly) may copy the whole data.table. Use set* syntax instead to avoid copying: ?set, ?setnames and ?setattr. If this message doesn't help, please report your use case to the data.table issue tracker so the root cause can be fixed or this message improved. #> Error in mutate(d_tmp, ...): ℹ In argument: `cluster_label = ifelse(is.na(eval(ensym(label_name))), #>   \"no_name\", eval(ensym(label_name)))`. #> Caused by error in `ensym()`: #> ! could not find function \"ensym\"  temporal_networks <- color_networks(graphs = temporal_networks, column_to_color = \"dynamic_cluster_leiden\", color = NULL) #> ℹ unique_color_across_list has been set to FALSE. There are 15 different categories to color. #> ℹ color is neither a vector of color characters, nor a data.frame. We will proceed with base R colors. #> ℹ We draw 7 colors from the ggplot2 palette and 7 from the Okabe-Ito palette. As more than 14 colors are needed, the colors will be recycled.  alluv_dt <- networks_to_alluv(temporal_networks, intertemporal_cluster_column = \"dynamic_cluster_leiden\", node_id = \"ID_Art\") #> ℹ The column \"cluster_label\" does not exist in the list of graphs provided. No name kept for clusters.  alluv_dt[1:5] #>    dynamic_cluster_leiden    window     ID_Art   color share_cluster_alluv #>                    <char>    <char>     <char>  <char>               <num> #> 1:                   cl_1 1975-1994   16182155 #56B4E9                6.22 #> 2:                   cl_1 1975-1994   26283591 #56B4E9                6.22 #> 3:                   cl_1 1975-1994   31895842 #56B4E9                6.22 #> 4:                   cl_1 1975-1994 1111111131 #56B4E9                6.22 #> 5:                   cl_1 1975-1994 1111111150 #56B4E9                6.22 #>    share_cluster_window share_cluster_max length_cluster    y_alluv #>                   <num>             <num>          <int>      <num> #> 1:                17.57             18.31              7 0.01351351 #> 2:                17.57             18.31              7 0.01351351 #> 3:                17.57             18.31              7 0.01351351 #> 4:                17.57             18.31              7 0.01351351 #> 5:                17.57             18.31              7 0.01351351"},{"path":"https://agoutsmedt.github.io/networkflow/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://agoutsmedt.github.io/networkflow/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_alluvial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Alluvial — plot_alluvial","title":"Plot the Alluvial — plot_alluvial","text":"easy way plot alluvial using columns created different function networkflow.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_alluvial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Alluvial — plot_alluvial","text":"","code":"plot_alluvial(   alluv_dt,   intertemporal_cluster_column,   node_id,   window_column = \"window\",   color_column = \"color\",   color_alluvial = FALSE,   color = NULL,   minimize_crossing = FALSE,   prepare_label = FALSE,   cluster_label_column = \"cluster_label\",   print_plot_code = FALSE )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_alluvial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Alluvial — plot_alluvial","text":"alluv_dt data.frame alluvial created networks_to_alluv(). intertemporal_cluster_column column identifier inter-temporal clusters. used add_clusters() merge_dynamic_clusters(), form dynamic_cluster_{clustering_method}. node_id column unique identifier node. window_column column alluvial time window. default, \"window\", created networks_to_alluv(). color_column column colors associated  categories intertemporal_cluster_column. default, \"color\", result color_alluvial(). color_alluvial color set categories intertemporal_cluster_column, can attribute colors setting color_alluvial TRUE. color_alluvial() used. color color_alluvialis TRUE, parameter color used color categories intertemporal_cluster_column. may vector colors (character format) two columns data frame first column distinct observations intertemporal_cluster_column second column vector colors want use. NULL colors automatically chosen color_alluvial()? minimize_crossing TRUE, minimize_crossing_alluvial() run reorder intertemporal_cluster_colum limit overlapping plot. prepare_label TRUE, prepare_label_alluvial() used create column label_x cluster_label_column prepare_label TRUE, label_alluvial() used values cluster_label_column taken displayed label. default, \"cluster_label\", default name column created name_clusters(). may also use column intertemporal_cluster_column. print_plot_code Set TRUE want ggplot2 code printing. useful totally satisfied plot want manipulate code .","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot your Networks — plot_networks","title":"Plot your Networks — plot_networks","text":"easy way plot networks using columns created different function networkflow.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot your Networks — plot_networks","text":"","code":"plot_networks(   graphs,   x = \"x\",   y = \"y\",   cluster_label_column = \"cluster_label\",   node_size_column = \"node_size\",   color_column = \"color\",   color_networks = FALSE,   color = NULL,   print_plot_code = FALSE )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot your Networks — plot_networks","text":"graphs tibble graph tidygraph list tibble graphs. x, y columns tibble graph list tibble graphs x y coordinates nodes (instance, coordinates produce layout_networks()). cluster_label_column values column taken displayed labels. default, \"cluster_label\", default name column created name_clusters(). may also use column produced add_clusters(). node_size_column column numeric values used size nodes. default, \"node_size\", column created build_dynamic_networks() build_network() compute_size set TRUE functions. NULL, size every nodes set 1. color_column column colors associated  categories cluster_label_column. default, \"color\", result color_networks(). color_networks color set categories cluster_label_column, can attribute colors setting color_networks TRUE. color_networks() used. color color_networksis TRUE, parameter color used color categories cluster_label_column. may vector colors (character format) two columns data frame first column distinct observations cluster_label_column second column vector colors want use. NULL colors automatically chosen color_networks(). print_plot_code Set TRUE want ggplot2 code printing. useful totally satisfied plot want manipulate code .","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/plot_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot your Networks — plot_networks","text":"used prepare_label_networks(), function automatically used produce coordinates category cluster_label_column.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/prepare_label_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating and Positioning Labels for Plotting Networks or Alluvial — prepare_label_networks","title":"Creating and Positioning Labels for Plotting Networks or Alluvial — prepare_label_networks","text":"prepare_label_networks() creates label column make easy center label around particular clusters alluvial graph intertemporal networks. prepare_label_alluvial()","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/prepare_label_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and Positioning Labels for Plotting Networks or Alluvial — prepare_label_networks","text":"","code":"prepare_label_networks(   graphs,   x = \"x\",   y = \"y\",   cluster_label_column = \"cluster_label\" )  prepare_label_alluvial(   alluv_dt = NA,   window_column = \"window\",   cluster_label_column = \"cluster_label\" )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/prepare_label_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and Positioning Labels for Plotting Networks or Alluvial — prepare_label_networks","text":"graphs tibble graph tidygraph list tibble graphs. x, y columns tibble graph list tibble graphs x y coordinates nodes (instance, coordinates produce layout_networks()). cluster_label_column column cluster label want display. default, \"cluster_label\", default name column created name_clusters(). may also use cluster identifier created add_clusters() simple cluster, merge_dynamic_clusters() inter-temporal clusters. alluv_dt data.frame alluvial created networks_to_alluv(). window_column column alluvial time window. default, \"window\", created networks_to_alluv().","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/tbl_main_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","title":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","text":"function deprecated replaced networkflow::extract_main_component(). function ) creates tidygraph graph using tbl_graph(); ii) keeps main components graph, using main_components(); iii) warns user first biggest component removed large.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/tbl_main_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","text":"","code":"tbl_main_component(   edges,   nodes,   nb_components = 1,   threshold_alert = 0.05,   ... )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/tbl_main_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","text":"edges dataframe list links nodes, columns \"\" \"\". two columns character format. nodes dataframe list nodes. first column used identifying column. careful avoid doublons first column. first column character format. nb_components default, function takes main component graph (nb_components = 1). However possible take many components wish Component 1 largest one, component 2 second one, etc. threshold_alert biggest component last one selection (default, nb_component = 1) gathers x% (default, 5%) total number nodes, function triggers warning inform user removed big component network. ... parameter tbl_graph() function. Edges directed default. Coupling co-citation network undirected networks.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/tbl_main_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","text":"tidygraph object list nodes list edges.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/tbl_main_component.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating Graph And Keeping Main Component With Tidygraph From Edges And Nodes — tbl_main_component","text":"function automatically rename first column nodes \"Id\".","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/top_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Displaying the Highest Cited Nodes — top_nodes","title":"Displaying the Highest Cited Nodes — top_nodes","text":"simple function keeping number n nodes highest chosen statistics value per communities number n nodes highest chosen statistics value within whole network. used display important nodes graph visualisation.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/top_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displaying the Highest Cited Nodes — top_nodes","text":"","code":"top_nodes(   graph,   ordering_column,   top_n = 20,   top_n_per_com = 1,   biggest_community = FALSE,   community_threshold = 0.01 )"},{"path":"https://agoutsmedt.github.io/networkflow/reference/top_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displaying the Highest Cited Nodes — top_nodes","text":"graph tidygraph object. ordering_column name column numeric values want use select important nodes network. instance, column gathering number citations article dataframe. top_n number nodes highest chosen statistics value. instance number highest cited nodes want display graph. top_n_per_com number highest cited nodes per community display. biggest_community true, possibility remove smallest community, depending community_threshold set. community_threshold biggest_community true, function selects nodes belong communities represent least x% total number nodes. default, parameter set 1%.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/reference/top_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displaying the Highest Cited Nodes — top_nodes","text":"data.table number n nodes highest chosen statistics value per communities number n nodes highest chosen statistics value within whole network. Informations like coordinates (x,y) community identifier kept using data.table visualisation.","code":""},{"path":"https://agoutsmedt.github.io/networkflow/news/index.html","id":"networkflow-010-development","dir":"Changelog","previous_headings":"","what":"networkflow 0.1.0 (Development)","title":"networkflow 0.1.0 (Development)","text":"Deprecated new functions: dynamic_network_cooccurrence() deprecated replaced build_dynamic_networks(); tbl_main_component() deprecated replaced build_network() filter_components(); leiden_workflow() deprecated replaced build_dynamic_networks(); community_names() deprecated replaced name_clusters(); community_colors() deprecated replaced color_networks(); new function calculate coordinates according different layout algorithms implement: layout_clusters();","code":""},{"path":"https://agoutsmedt.github.io/networkflow/news/index.html","id":"networkflow-0009000","dir":"Changelog","previous_headings":"","what":"networkflow 0.0.0.9000","title":"networkflow 0.0.0.9000","text":"Launch development version","code":""}]
