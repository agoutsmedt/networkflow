% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/color_networks.R
\name{color_networks}
\alias{color_networks}
\alias{color_alluvial}
\title{Color Nodes and Edges of Networks or Alluvial}
\usage{
color_networks(
  graphs,
  column_to_color,
  color = NULL,
  unique_color_across_list = FALSE
)

color_alluvial(alluvial, column_to_color, color = NULL)
}
\arguments{
\item{graphs}{A tibble graph from \href{https://tidygraph.data-imaginist.com/}{tidygraph} or a list of tibble
graphs.}

\item{column_to_color}{The column of the categorical variable to use to color nodes and edges. For instance,
the \verb{cluster_\{clustering_method\}} created with \link[=add_clusters]{add_clusters()}
or the \verb{dynamic_cluster_\{clustering_method\}} created with
\link[=merge_dynamic_clusters]{merge_dynamic_clusters()}.}

\item{color}{The colors to use. It may be a vector of colors (in a character format)
or a two columns data.frame with the first column as
the distinct observations of the \code{column_to_color} and a second column with the
vector of colors you want to use.}

\item{unique_color_across_list}{If set to \code{TRUE}, in a list of tibble graphs, the same categorical variable will
be considered as a different variable in different graphs and thus receive a different
color. In other words, if set to \code{TRUE} cluster "01" in two different graphs will
have two different colors. If set to \code{FALSE} (by default), cluster "01" will have
the same color in every graphs it exists.}

\item{alluvial}{A data.frame created with \link[=networks_to_alluv]{networks_to_alluv()}}
}
\value{
The same tibble graph or list of tibble graphs as input, but with a new \code{color}
column for both nodes and edges.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{color_networks()} takes as input a tibble graph (from \href{https://tidygraph.data-imaginist.com/}{tidygraph})
or a list of tibble graphs and associates a color for each graphs' edges and nodes,
depending on a chosen categorical variable in \code{columnr_to_color} (most likely a cluster column).

\code{color_alluvial()} takes a data.frame and associates a color to each value of the chosen
categorical variable in \code{column_to_color}. This function may be used with any data.frame
even if it aims at coloring alluvial data frame created with
\link[=networks_to_alluv]{networks_to_alluv()}.

You may either provide the color palette,
provide a data frame associating the different values of the categorical variable with
colors, or let the function provide colors (see details).
}
\details{
The best practice is to provide a list of colors equals to the number of categorical
variable to color. If you provide more colors, excess colors will not be used. If you
provide less colors, colors will be recycled. If you provide no colors, \code{palette.colors()}
of base R will be used: the 7 colors of \code{ggplot2} palette will be used (black is excluded) and
then the 7 colors of \code{Okabe-Ito} palette (black and gray are excluded). Above 14 colors,
the colors of the two palettes will be recycled.
}
\examples{
library(networkflow)

nodes <- Nodes_stagflation |>
dplyr::rename(ID_Art = ItemID_Ref) |>
dplyr::filter(Type == "Stagflation")

references <- Ref_stagflation |>
dplyr::rename(ID_Art = Citing_ItemID_Ref)

temporal_networks <- build_dynamic_networks(nodes = nodes,
directed_edges = references,
source_id = "ID_Art",
target_id = "ItemID_Ref",
time_variable = "Year",
cooccurrence_method = "coupling_similarity",
time_window = 20,
edges_threshold = 1,
overlapping_window = TRUE,
filter_components = TRUE,
verbose = FALSE)

temporal_networks <- add_clusters(temporal_networks,
objective_function = "modularity",
clustering_method = "leiden",
verbose = FALSE)

temporal_networks <- color_networks(graphs = temporal_networks,
column_to_color = "cluster_leiden",
color = NULL)

temporal_networks[[1]]

}
