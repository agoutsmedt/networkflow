% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_dynamic_networks2.R
\name{build_dynamic_networks2}
\alias{build_dynamic_networks2}
\title{Creating One or Multiple Networks Using Structured or Statistical Backbone Extraction}
\usage{
build_dynamic_networks2(
  nodes,
  directed_edges,
  source_id,
  target_id,
  time_variable = NULL,
  time_window = NULL,
  backbone_method = c("statistical", "structured"),
  statistical_method = c("sdsm", "fdsm", "fixedfill", "fixedfrow", "fixedcol"),
  alpha = alpha,
  coupling_measure = c("coupling_angle", "coupling_strength", "coupling_similarity"),
  edges_threshold = 1,
  overlapping_window = FALSE,
  compute_size = FALSE,
  keep_singleton = FALSE,
  filter_components = FALSE,
  ...,
  verbose = TRUE
)
}
\arguments{
\item{nodes}{Table of nodes and their metadata. One row per node. For example, a table
of articles with identifiers, authors, publication year, etc.}

\item{directed_edges}{Table of edges representing the links between nodes and associated entities
(e.g., references, authors, affiliations).}

\item{source_id}{Quoted name of the column giving the unique identifier of each node.}

\item{target_id}{Quoted name of the column giving the identifier of the element linked to each node.}

\item{time_variable}{Optional name of the column with a temporal variable (e.g., publication year).}

\item{time_window}{Optional size of the time window (in units of \code{time_variable}) to construct temporal networks.}

\item{backbone_method}{Method used to extract the network backbone. Choose between:
\itemize{
\item \code{"structured"}: uses cooccurrence measures from the \href{https://agoutsmedt.github.io/biblionetwork/}{biblionetwork} package;
\item \code{"statistical"}: uses statistical models from the \href{https://github.com/djmurphy533/backbone}{backbone} package.
}}

\item{statistical_method}{For \code{backbone_method = "statistical"}, select the null model: one of
\code{"sdsm"}, \code{"fdsm"}, \code{"fixedfill"}, \code{"fixedfrow"}, \code{"fixedcol"}.}

\item{alpha}{Significance threshold for statistical backbone extraction. Required if
\code{backbone_method = "statistical"}.}

\item{coupling_measure}{For \code{backbone_method = "structured"}, choose the cooccurrence method:
\itemize{
\item \code{"coupling_angle"} (biblio_coupling);
\item \code{"coupling_strength"};
\item \code{"coupling_similarity"}.
}}

\item{edges_threshold}{Threshold for edge weight filtering in structured methods.}

\item{overlapping_window}{Logical. If \code{TRUE}, builds networks using rolling time windows.}

\item{compute_size}{Logical. If \code{TRUE}, computes the number of incoming edges per node (e.g., citation count).}

\item{keep_singleton}{Logical. If \code{FALSE}, removes nodes with no edges in the final network.}

\item{filter_components}{Logical. If \code{TRUE}, keeps only the main component(s) using \code{networkflow::filter_components()}.}

\item{...}{Additional arguments passed to \code{filter_components()}.}

\item{verbose}{Logical. If \code{TRUE}, displays progress messages.}
}
\value{
\itemize{
\item A single tidygraph object if \code{time_window} is \code{NULL};
\item A list of tidygraph objects (one per time window) otherwise.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{build_dynamic_networks2()} builds one or several networks (as tidygraph objects)
from a table of nodes and directed edges, with support for both structured cooccurrence
methods and statistical backbone extraction using the \href{https://github.com/zpneal/backbone}{backbone} package.
The function is useful for constructing bibliometric or affiliation networks across
static or dynamic time windows.
}
\details{
\code{build_dynamic_networks2()} generalizes \code{build_dynamic_networks()} by adding support for
statistical backbone extraction using null models from the \code{backbone} package. The cooccurence methods used in
\code{build_dynamic_networks()} can be viewed as deterministic methods to extract the network backbone. The backbone is defined as the significant edges in the network.

As with \code{build_dynamic_networks()}, the function constructs networks for each time window. If \code{time_variable} and \code{time_window} are defined, the function constructs networks
for each time window (sliding or non-overlapping). Otherwise, it builds a single static network.

If \code{backbone_method = "structured"}, cooccurrence edges are computed using bibliometric coupling
techniques. The term structured refers to deterministic methods based on thresholding cooccurrence measures.
If \code{backbone_method = "statistical"}, the function constructs a bipartite incidence matrix
and extracts statistically significant edges using one of the null models from the \code{backbone} package.
}
\seealso{
\code{\link[biblionetwork:biblio_coupling]{biblionetwork::biblio_coupling()}}, \code{\link[backbone:sdsm]{backbone::sdsm()}}
}
